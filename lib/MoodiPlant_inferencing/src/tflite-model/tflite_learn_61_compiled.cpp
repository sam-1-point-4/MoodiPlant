/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 01.07.2025 10:47:18

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242128;
#else
constexpr int kTensorArenaSize = 241104;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[96] = { -2856, 4970, 11718, 3564, -3979, -5869, 25193, 2708, 4152, -2047, 13829, -331, -12076, 2920, 18827, 8542, 19080, 7230, -5215, -8336, 6195, 39310, 26352, 24114, 1320, 1342, 5435, 3979, 2838, -6506, 9143, -3264, -357, 5943, 73, 1320, 14504, 6678, -2271, 6198, 12464, 7056, 6530, 14783, 5573, 6571, 2700, 10211, 6122, -7341, -8456, 765, -337, -1713, 3037, -4, 297, -1373, -5152, 13982, -1173, 1887, -1666, -2187, -4583, 9855, 28341, 2453, -3092, 1078, 2112, 2758, 2050, -1647, 834, 14526, -572, 23645, 20947, -1334, 13417, 2483, -556, 1989, 19493, 10248, 6088, 2082, 7792, 5437, -423, -10043, 902, -2547, -2164, -2554, };
const TfArray<1, int> tensor_dimension2 = { 1, { 96 } };
const TfArray<96, float> quant2_scale = { 96, { 0.00021821094560436904, 0.00031642543035559356, 0.00020451868476811796, 0.00024668249534443021, 0.00026567647000774741, 0.00025167563580907881, 0.00013195139763411134, 0.00026331268600188196, 0.00014657828432973474, 0.00031793166999705136, 0.00014387552801053971, 0.00022016800357960165, 0.00021125443163327873, 0.00097223196644335985, 0.0001643036084715277, 0.00013526807015296072, 9.8079079180024564e-05, 0.00020042223331984133, 0.00037466484354808927, 0.00020408806449268013, 0.00010000202019000426, 6.8880646722391248e-05, 0.00011650064698187634, 6.9824294769205153e-05, 0.00014781569188926369, 0.00036097865086048841, 0.00054914684733375907, 0.00027242023497819901, 0.00018361277761869133, 0.00030361508834175766, 0.00016084057278931141, 0.00023310924007091671, 0.00016481237253174186, 0.00019477838941384107, 0.00024436283274553716, 0.0001864447258412838, 0.00013160762318875641, 0.00016134855104610324, 0.00027382373809814453, 0.00028715148800984025, 0.00010302634473191574, 0.00036815734347328544, 0.00023102329578250647, 0.00015714891196694225, 0.00034391949884593487, 0.00015395479567814618, 0.00018755551718641073, 0.00021238785120658576, 0.00022083928342908621, 0.00017920447862707078, 0.00018666150572244078, 0.00013369125372264534, 0.00042751527507789433, 0.00017954134091269225, 0.00025760155403986573, 0.0002637519792187959, 0.0003415167739149183, 0.00019302147848065943, 0.00029846312827430665, 0.0001325194607488811, 0.00063335464801639318, 0.00034486557706259191, 0.00016455493459943682, 0.00035534528433345258, 0.00040769067709334195, 0.00019467429956421256, 7.6665208325721323e-05, 0.00016397518629673868, 0.0003745971480384469, 0.00030618265736848116, 0.00018956349231302738, 0.00018985294445883483, 0.00066196802072227001, 0.00025407230714336038, 0.00020622924785129726, 0.00014892967010382563, 0.00022402696777135134, 7.9379307862836868e-05, 8.7108717707451433e-05, 0.00014050277241040021, 0.00010948131966870278, 0.0001332783285761252, 0.00014863559044897556, 0.00012469899957068264, 9.3322407337836921e-05, 0.00023301721375901252, 0.00038614356890320778, 0.00014294094580691308, 9.0845664090011269e-05, 0.00037782464642077684, 0.00021707534324377775, 0.00019688651082105935, 0.00024509424110874534, 0.0004053863522130996, 0.00028889000532217324, 0.00015412645007018, } };
const TfArray<96, int> quant2_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[96*1*1*16] = { 
  /* [0][0][][] */ -29,91,-2,-127,-44,-31,-32,-68,-19,16,3,77,20,-58,-7,50, 
  /* [1][0][][] */ -37,22,-64,-4,-30,-29,28,-85,62,54,-60,19,3,3,42,-127, 
  /* [2][0][][] */ 1,10,-37,38,44,19,-56,-63,127,-34,-3,10,-16,96,-71,23, 
  /* [3][0][][] */ 47,-67,5,-112,8,-29,-8,-2,114,-3,75,44,-8,46,20,127, 
  /* [4][0][][] */ -81,50,14,41,7,-19,-2,41,3,9,21,-22,-127,-13,-16,28, 
  /* [5][0][][] */ 3,67,117,5,22,80,-78,77,-55,73,-25,-33,36,-46,-127,21, 
  /* [6][0][][] */ 36,-58,121,-127,40,1,-43,99,-76,-102,55,-35,4,91,-21,82, 
  /* [7][0][][] */ 37,117,-27,-59,94,13,4,-50,127,96,-28,20,28,-23,63,46, 
  /* [8][0][][] */ 12,-85,10,-85,23,-56,18,-73,25,60,72,-8,17,127,79,59, 
  /* [9][0][][] */ 8,-32,-5,127,42,-8,40,-61,-64,111,31,-21,-6,-64,-7,-8, 
  /* [10][0][][] */ -8,23,-46,-127,10,0,-10,36,32,-34,18,-27,-16,-43,-2,29, 
  /* [11][0][][] */ 2,17,23,-19,81,-30,85,-58,-84,38,-2,30,0,127,-69,-31, 
  /* [12][0][][] */ 69,-18,-125,-15,31,-80,27,23,16,58,-78,-48,-39,127,-2,32, 
  /* [13][0][][] */ -17,7,-25,10,4,-127,-3,18,4,-12,7,-1,12,-14,10,11, 
  /* [14][0][][] */ 25,-26,95,-32,62,6,-127,-93,-19,-44,28,18,8,-61,-18,-32, 
  /* [15][0][][] */ -85,21,-18,-50,-1,2,127,58,-37,45,77,-28,11,86,64,2, 
  /* [16][0][][] */ 14,62,127,95,1,19,89,74,-92,14,-73,-8,15,10,9,-82, 
  /* [17][0][][] */ -40,-111,-15,30,-73,-24,-60,15,-127,-31,15,-46,-3,41,62,-38, 
  /* [18][0][][] */ 4,42,6,66,42,5,21,-4,71,42,-30,-31,14,127,56,21, 
  /* [19][0][][] */ 11,-25,41,12,108,20,-101,-69,-103,-80,-38,-127,-40,-46,0,-39, 
  /* [20][0][][] */ 98,-36,-60,-34,10,-127,12,24,-52,35,-109,-14,28,6,23,-1, 
  /* [21][0][][] */ 74,-24,77,-18,-16,-2,-10,104,-8,-102,76,35,-1,127,49,87, 
  /* [22][0][][] */ -24,41,-39,127,-54,5,89,67,-7,35,-13,41,-2,8,30,-1, 
  /* [23][0][][] */ 70,-2,110,-95,60,-16,-13,54,14,17,3,-23,4,-16,-127,29, 
  /* [24][0][][] */ -127,40,11,-17,3,106,26,-20,-3,20,99,-9,-77,17,58,-28, 
  /* [25][0][][] */ 26,24,13,21,12,9,65,-50,-4,-127,-13,-19,-11,-29,12,20, 
  /* [26][0][][] */ -37,-4,-2,6,-49,-10,-39,-35,-111,-36,2,-36,10,127,-35,53, 
  /* [27][0][][] */ -5,29,7,66,38,-29,-17,-32,56,6,-26,0,7,127,-9,13, 
  /* [28][0][][] */ 16,70,58,62,127,-8,31,37,-91,-21,-50,-34,19,93,47,-35, 
  /* [29][0][][] */ 0,-2,8,16,30,-1,9,37,-20,-12,-15,-127,-1,-15,-18,5, 
  /* [30][0][][] */ -20,81,-49,73,-39,-19,42,-127,-44,56,-17,-3,57,37,78,86, 
  /* [31][0][][] */ -37,-21,-12,-68,-5,-1,-48,-103,21,78,-12,-127,-32,-46,4,21, 
  /* [32][0][][] */ -127,-78,-10,59,52,37,-13,7,-3,-43,-102,45,73,2,61,70, 
  /* [33][0][][] */ -12,-40,-41,-7,-92,-10,-81,0,65,17,15,-48,30,-117,127,31, 
  /* [34][0][][] */ 48,-7,65,24,44,17,-47,82,-83,-47,67,21,13,-7,-17,127, 
  /* [35][0][][] */ -42,54,-75,18,-12,-21,30,-121,88,94,-84,2,6,-7,82,-127, 
  /* [36][0][][] */ -33,41,13,127,37,24,122,26,-12,43,-27,-11,-11,23,-67,-51, 
  /* [37][0][][] */ 4,-9,11,-68,-1,-4,-37,-49,-76,-11,1,-9,2,-127,61,-35, 
  /* [38][0][][] */ 42,90,-10,-49,127,-1,31,-38,113,74,-16,-3,9,-28,45,14, 
  /* [39][0][][] */ -28,63,-9,-127,-15,8,-44,34,46,-72,-25,-18,13,73,44,29, 
  /* [40][0][][] */ 0,-26,19,-94,-3,-16,-6,-39,-127,-1,-11,-28,-5,-119,91,-67, 
  /* [41][0][][] */ -9,-17,-44,-17,2,-33,19,-9,-29,15,-45,-8,-127,11,28,33, 
  /* [42][0][][] */ 127,87,-30,-20,-75,-51,-20,-52,4,22,84,-52,-61,48,99,-112, 
  /* [43][0][][] */ -12,112,-77,-4,64,-20,115,-37,54,88,-46,-4,28,-127,-78,-55, 
  /* [44][0][][] */ -23,-13,8,-38,55,2,-88,-127,-18,-9,12,5,-3,-35,66,-62, 
  /* [45][0][][] */ -10,45,-127,-40,25,-72,25,-73,9,30,4,-76,26,-24,52,-21, 
  /* [46][0][][] */ 8,-1,-19,-90,-13,12,21,-30,-119,-23,9,14,-10,-127,68,-33, 
  /* [47][0][][] */ 22,48,24,-16,127,-14,-26,16,-54,40,0,21,5,1,113,-27, 
  /* [48][0][][] */ -127,-75,-22,34,65,16,11,-20,-1,-17,-108,41,61,8,77,51, 
  /* [49][0][][] */ 15,12,100,81,127,-1,47,31,-127,-51,-39,-81,14,124,20,-62, 
  /* [50][0][][] */ 29,-20,-92,-12,28,-127,-41,-13,-20,-25,-4,-42,36,-17,-7,11, 
  /* [51][0][][] */ 7,38,43,12,28,4,1,24,-127,59,6,-115,12,-114,-24,88, 
  /* [52][0][][] */ 3,52,0,51,46,-1,22,33,68,85,-28,-53,36,127,63,22, 
  /* [53][0][][] */ -7,-51,-21,-18,-92,-9,-81,-2,49,22,15,-59,30,-127,124,17, 
  /* [54][0][][] */ 57,-15,-46,9,127,82,-119,-46,-82,-7,-34,-78,1,-45,-15,-40, 
  /* [55][0][][] */ 48,-8,5,2,38,-40,-68,-127,-36,-72,-59,10,-6,-27,19,-7, 
  /* [56][0][][] */ -18,14,24,-21,-6,-25,-93,67,-10,127,-3,-14,28,5,-4,8, 
  /* [57][0][][] */ -1,18,-49,-22,-56,-53,127,91,-28,28,-13,-3,30,24,125,-9, 
  /* [58][0][][] */ 48,23,-127,33,92,102,-34,50,-105,-40,-2,8,-35,25,-1,-22, 
  /* [59][0][][] */ -101,69,110,21,-77,-66,127,125,21,7,30,-17,16,11,74,0, 
  /* [60][0][][] */ 7,-6,-52,-2,19,-127,-22,-2,-9,-17,-3,-23,28,-16,3,7, 
  /* [61][0][][] */ 21,-8,26,127,78,21,26,6,-99,-1,15,41,-12,22,34,-53, 
  /* [62][0][][] */ -47,127,18,-46,-29,-9,-67,56,-21,-61,-83,-54,-7,-92,-55,-38, 
  /* [63][0][][] */ -42,27,-28,127,-80,12,-71,-34,-62,-25,-24,-38,26,66,40,39, 
  /* [64][0][][] */ 9,2,3,41,3,10,-14,62,26,3,-16,-44,-11,-127,50,-3, 
  /* [65][0][][] */ -16,-39,9,-127,41,-36,61,-34,-10,47,10,-110,-14,1,21,-47, 
  /* [66][0][][] */ 32,-20,66,-23,3,3,-7,109,7,-73,43,33,2,127,18,75, 
  /* [67][0][][] */ 0,52,-16,-127,-13,-3,-59,34,81,-96,-28,-6,30,80,74,35, 
  /* [68][0][][] */ -30,36,127,12,11,5,-6,0,-40,-19,-19,-35,13,-19,86,-32, 
  /* [69][0][][] */ 127,80,-16,-3,-88,-36,-28,-38,4,20,92,-57,-64,58,69,-98, 
  /* [70][0][][] */ 40,7,-54,-10,-27,26,53,127,-33,91,-35,7,12,63,-27,19, 
  /* [71][0][][] */ 8,-3,-7,10,4,-79,2,21,-35,17,-79,5,-127,-2,42,49, 
  /* [72][0][][] */ 11,20,-127,13,9,12,28,92,-40,-25,8,-8,22,15,-1,6, 
  /* [73][0][][] */ -48,22,41,4,47,-36,-76,-127,20,-74,37,-18,14,-46,40,-16, 
  /* [74][0][][] */ 1,35,38,127,19,-7,-83,85,-70,16,-49,45,21,-121,37,-95, 
  /* [75][0][][] */ -13,29,-55,13,13,-8,20,-18,123,25,-12,-3,13,127,-40,1, 
  /* [76][0][][] */ 0,-14,-2,18,2,-13,-12,61,16,-30,-20,-127,-5,-6,8,13, 
  /* [77][0][][] */ -13,29,-17,127,-51,20,82,99,11,41,-8,37,-14,-17,-10,-12, 
  /* [78][0][][] */ 4,3,29,-119,49,-33,-36,43,25,-50,8,-38,27,127,21,47, 
  /* [79][0][][] */ -18,-94,-77,-58,-85,-6,24,-81,127,18,27,56,18,41,46,-51, 
  /* [80][0][][] */ -46,-7,127,-104,18,-44,18,-106,-71,53,-48,-121,34,113,96,-50, 
  /* [81][0][][] */ -47,45,-127,27,70,-124,-14,55,-5,-44,64,-2,26,3,10,-4, 
  /* [82][0][][] */ 127,-9,-5,16,13,-113,-20,17,-18,-10,-102,-3,106,6,-5,25, 
  /* [83][0][][] */ -38,79,-120,-87,-36,-18,46,-127,68,52,-46,-126,16,53,53,105, 
  /* [84][0][][] */ -35,33,70,-36,5,-28,65,-127,-44,48,-12,-62,32,54,67,-3, 
  /* [85][0][][] */ -85,127,27,-123,-76,-31,-27,-5,-57,-4,-70,24,6,-11,-95,-28, 
  /* [86][0][][] */ -7,6,-34,0,-30,-31,127,24,0,-27,-1,9,7,30,85,-18, 
  /* [87][0][][] */ -23,-40,3,-121,9,-35,52,-16,-5,19,-10,-127,-18,3,10,-40, 
  /* [88][0][][] */ 105,-28,46,-10,26,-124,2,34,-57,40,-127,-56,43,34,79,0, 
  /* [89][0][][] */ 24,-23,-42,-52,26,-13,-25,-8,-49,6,34,-68,127,-7,29,-44, 
  /* [90][0][][] */ -1,-54,39,-63,67,-4,-68,87,61,-86,-38,-25,-12,121,21,-127, 
  /* [91][0][][] */ -44,-8,-23,-42,19,-16,-30,-97,8,61,-9,-127,-31,-15,3,11, 
  /* [92][0][][] */ -23,21,40,16,0,-127,13,1,1,-24,1,-14,3,-25,19,6, 
  /* [93][0][][] */ 39,-21,127,-12,-52,56,28,-29,-21,25,-71,-19,-22,-2,31,3, 
  /* [94][0][][] */ 28,1,-14,-22,26,-6,-15,-4,-32,-19,15,-58,127,-17,31,-32, 
  /* [95][0][][] */ 127,91,-3,34,-93,-15,-66,-5,-26,-18,89,-44,-43,27,77,-73, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant3_scale = { 96, { 0.00075831293361261487, 0.0010996217606589198, 0.00071073044091463089, 0.00085725547978654504, 0.00092326215235516429, 0.0008746072999201715, 0.00045854918425902724, 0.00091504765441641212, 0.00050937960622832179, 0.0011048561427742243, 0.00049998715985566378, 0.00076511397492140532, 0.00073413806967437267, 0.003378639230504632, 0.00057097757235169411, 0.00047007505781948566, 0.00034083824721165001, 0.00069649470970034599, 0.0013020116603001952, 0.00070923398016020656, 0.00034752071951515973, 0.00023936967772897333, 0.00040485570207238197, 0.00024264899548143148, 0.00051367975538596511, 0.0012544502969831228, 0.0019083605147898197, 0.00094669760437682271, 0.00063807953847572207, 0.0010551040759310126, 0.00055894302204251289, 0.00081008655251935124, 0.00057274557184427977, 0.00067688158014789224, 0.00084919435903429985, 0.00064792094053700566, 0.00045735450112260878, 0.00056070834398269653, 0.00095157499890774488, 0.00099789071828126907, 0.00035803066566586494, 0.0012793971691280603, 0.00080283760325983167, 0.00054611399536952376, 0.0011951674241572618, 0.00053501402726396918, 0.00065178109798580408, 0.00073807686567306519, 0.00076744676334783435, 0.00062276009703055024, 0.00064867432229220867, 0.0004645954177249223, 0.0014856741763651371, 0.0006239307695068419, 0.00089520064648240805, 0.00091657426673918962, 0.0011868175351992249, 0.00067077606217935681, 0.0010372002143412828, 0.00046052329707890749, 0.0022009941749274731, 0.0011984551092609763, 0.00057185092009603977, 0.00123487354721874, 0.001416780985891819, 0.00067651987774297595, 0.00026642211014404893, 0.00056983623653650284, 0.001301776384934783, 0.001064026728272438, 0.00065875909058377147, 0.0006597649771720171, 0.0023004296235740185, 0.00088293611770495772, 0.00071667489828541875, 0.000517551030497998, 0.00077852437971159816, 0.00027585396310314536, 0.00030271473224274814, 0.00048826637794263661, 0.00038046258850954473, 0.00046316045336425304, 0.00051652902038767934, 0.0004333461110945791, 0.00032430814462713897, 0.00080976675963029265, 0.0013419018359854817, 0.00049673934699967504, 0.00031570112332701683, 0.001312992419116199, 0.00075436657061800361, 0.00068420759635046124, 0.00085173605475574732, 0.0014087731251493096, 0.0010039323242381215, 0.0005356105393730104, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[16] = { -9251, 15722, -18720, -2664, -10261, 10657, 28635, -54641, -989, 16530, 24448, 15788, -11000, 13621, -6505, 11313, };
const TfArray<1, int> tensor_dimension4 = { 1, { 16 } };
const TfArray<16, float> quant4_scale = { 16, { 0.00083461013855412602, 0.00042409449815750122, 0.00023514470376539975, 0.00021913026284892112, 0.00041957784560509026, 0.00040479053859598935, 0.0003700835513882339, 0.00027984599000774324, 0.00033420513500459492, 0.00027249069535173476, 0.00073794607305899262, 0.00058987486409023404, 0.0004509909194894135, 0.00023807991237845272, 0.00052174617303535342, 0.00056481390492990613, } };
const TfArray<16, int> quant4_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[16*1*1*96] = { 
  /* [0][0][][] */ -17,-13,3,-32,17,-7,-39,0,16,4,-11,5,-7,-9,-26,6,-2,4,-3,-2,10,-32,5,5,4,11,4,127,32,-36,41,-10,-1,6,6,2,-9,13,-38,-4,-11,7,0,36,6,14,14,5,24,1,-7,9,17,-19,-11,81,5,8,-28,-35,-5,24,0,-25,-40,-65,-21,37,7,10,17,-15,-7,-32,-5,-23,-26,18,2,6,-10,-27,25,21,-3,-10,-8,-92,3,-15,6,-4,46,-32,-35,-12, 
  /* [1][0][][] */ 35,-69,-73,-57,127,-14,62,38,-21,-89,-56,-17,4,-5,-60,38,-68,6,46,42,19,38,-16,-55,14,-8,-11,-69,33,-19,-60,37,-22,31,5,1,8,-8,2,21,-30,36,-41,-21,-39,90,10,8,26,-74,13,-40,-20,39,51,12,-56,-22,-34,-35,24,-19,0,-43,-85,104,-27,-21,-5,-26,-20,17,53,-105,-28,2,34,-50,44,7,6,-27,27,1,-51,33,-17,26,29,-39,-2,9,27,11,33,97, 
  /* [2][0][][] */ 2,56,-85,-11,89,79,31,72,-5,-102,-3,-17,-4,0,27,24,8,-17,-47,65,20,-2,73,19,49,25,-5,-38,34,-10,45,-55,32,37,-26,34,-127,-83,26,30,2,-46,16,-19,20,-33,1,66,-29,18,-26,-10,87,-6,-8,53,32,10,31,4,23,22,31,-27,17,-2,-35,1,-44,2,-15,-38,-42,-78,12,60,71,48,31,-8,29,-42,8,-12,-40,28,15,39,-22,27,5,-22,-1,-35,-63,-1, 
  /* [3][0][][] */ 65,19,94,-8,53,-35,19,-11,-20,-66,16,-43,-3,36,38,104,22,-5,29,7,124,-10,40,16,58,-19,-18,19,33,45,-6,90,-106,24,29,-7,-21,-22,-7,42,-81,-31,73,15,23,43,-51,-94,-62,-37,-58,43,-3,-127,2,23,-112,73,61,37,13,100,-14,-54,33,70,-8,-50,28,-26,0,-68,47,-37,56,-18,14,-2,50,43,-34,-73,19,-13,-29,15,24,42,26,15,19,39,35,103,44,-36, 
  /* [4][0][][] */ 24,-6,19,-11,127,36,-6,-19,-38,-46,-37,-31,-47,22,-8,50,26,-78,-36,82,-18,6,29,-18,1,-7,12,-39,8,-13,54,-34,85,10,-21,11,39,17,8,8,-27,-7,-27,-24,-4,-50,-12,8,35,8,-20,9,-5,-35,10,-23,27,-12,-32,27,-2,54,60,23,40,44,-20,-4,-43,2,42,60,15,-67,-41,-26,30,33,78,-32,-7,-37,2,-7,-66,9,38,48,-49,32,1,-41,10,11,24,-21, 
  /* [5][0][][] */ 9,-13,-15,12,27,-17,40,-27,-22,-41,-17,6,-3,27,-1,16,-8,-4,15,-5,30,12,-41,66,12,-6,13,-103,-5,29,12,31,-5,3,5,-62,27,22,-8,11,-10,-8,25,-20,-6,-2,4,-23,-20,-20,9,-17,-4,-29,-7,-52,-3,14,-23,16,68,14,0,34,-5,57,2,77,8,94,12,29,10,12,-6,70,-28,-10,18,11,-10,-10,-1,19,-12,15,-13,127,-3,27,-3,-13,2,15,-61,17, 
  /* [6][0][][] */ 25,-78,19,-36,-32,12,33,21,6,-3,-16,-70,-36,-2,-29,29,16,-8,0,-6,-43,36,13,7,-23,-2,-16,-12,-18,14,39,-5,59,8,61,-3,-6,-13,18,-94,-20,90,3,-34,14,-22,-20,18,-13,36,-27,67,-20,-60,-10,-9,3,-61,-7,1,-14,57,38,-78,29,-29,5,-21,-6,1,127,3,-40,9,-32,25,-83,-9,17,5,31,42,21,-1,-23,-2,39,22,11,8,48,-36,-15,-5,-32,-16, 
  /* [7][0][][] */ 5,127,45,12,121,49,43,-34,-29,-27,41,-13,-25,30,20,27,14,-39,5,30,36,-32,37,11,-5,15,13,9,23,-17,9,21,46,-5,-45,8,21,10,-6,83,-47,27,20,22,-11,-26,29,-22,-28,-29,31,9,23,-41,-34,48,46,3,-18,-1,-13,-44,-4,-6,-55,73,-34,-88,-8,-38,-6,65,-16,-29,17,15,57,58,41,-13,-44,-35,-10,-7,-16,55,-8,-2,-31,30,-36,-36,-50,-17,23,-3, 
  /* [8][0][][] */ -3,1,50,20,-127,-28,44,-17,28,84,64,8,-15,13,25,8,-43,11,11,-2,-39,-2,-111,66,16,-35,58,-15,6,13,1,52,74,-20,-1,-8,-25,-14,4,35,13,-31,44,8,-43,-5,46,2,-106,16,26,23,-61,-39,-34,43,15,-52,-85,-20,16,-32,-28,-8,6,75,-3,-55,20,-15,-44,-24,38,51,54,-12,-20,-39,-16,28,-87,9,-17,-5,24,18,62,40,29,-37,46,48,4,-4,41,16, 
  /* [9][0][][] */ 10,-108,-17,21,95,84,-34,-27,28,-36,95,91,-20,13,92,-104,17,-32,-4,17,-56,-49,33,-11,-26,8,-3,27,-29,8,7,-13,19,17,-108,31,-4,13,-17,61,31,-74,-23,64,0,-15,-76,-32,29,27,-14,-85,64,28,-13,-49,-5,87,-15,3,20,-55,-29,127,-87,-14,-4,-21,0,31,-59,-78,45,-2,0,31,63,-64,24,4,-11,-22,7,28,-3,-68,23,-7,3,-40,-56,34,-63,-9,-8,-45, 
  /* [10][0][][] */ -45,-20,-31,-43,-25,-6,63,-22,33,20,27,34,25,-11,-6,-4,-7,21,-27,-19,-3,30,16,19,-9,-10,10,-127,26,-43,53,-33,1,19,-5,-10,-5,31,2,-5,9,-34,25,-49,10,-5,28,14,-5,36,-26,-17,-34,-23,-6,-56,18,13,-5,-40,24,10,-2,8,-34,87,-15,-30,14,-28,-1,-18,-28,-8,20,54,-6,38,-20,17,-21,0,6,24,8,-17,-8,114,-2,-3,13,13,21,-38,42,-34, 
  /* [11][0][][] */ -85,20,-1,-1,18,-62,-17,-1,-49,-6,-2,18,28,22,-25,-6,51,3,-63,-52,21,-7,-7,-1,74,6,61,-2,-19,30,-40,20,-8,22,-10,-11,-11,5,23,9,-18,-7,3,5,79,14,76,15,47,41,-5,35,11,-64,23,-5,-68,-18,-34,-45,-6,-11,1,21,-3,-26,30,1,22,8,-6,29,-24,12,27,4,-19,80,-127,68,-39,-5,-66,-66,123,19,38,-10,13,45,-31,-56,-24,44,-27,-2, 
  /* [12][0][][] */ -6,-8,-36,2,65,21,2,-14,-13,20,23,-5,5,-15,31,-9,-31,-11,12,-15,-8,-20,-36,47,-21,42,-21,97,-18,33,-35,2,-13,26,9,29,-18,-17,16,8,-2,-14,-4,7,-14,-1,21,22,-3,-4,0,-29,-17,11,-13,-14,-9,-10,13,22,-14,-20,-2,46,40,-77,12,54,-29,-127,-6,51,4,8,11,82,5,-12,-4,1,-3,21,-39,3,10,-15,2,-46,-7,13,8,-1,-36,35,-12,23, 
  /* [13][0][][] */ -82,64,-4,-5,-63,6,-15,15,-38,-26,46,25,84,12,-24,-2,-12,30,-42,-10,17,-12,55,-56,64,39,-5,-1,11,-32,-34,-101,-96,-33,3,8,-3,28,37,-17,-33,83,0,15,41,6,-13,5,65,-10,33,75,69,-67,83,-14,-23,53,43,3,12,31,-13,22,3,-25,6,7,15,19,23,-127,11,-25,-81,9,53,43,-49,-46,86,-19,1,-25,39,-34,89,4,-23,-5,-20,24,39,-41,-18,7, 
  /* [14][0][][] */ -31,17,-13,-47,30,0,-9,29,-80,0,21,14,-24,-60,-71,-27,-79,-12,67,9,31,-4,16,-97,-40,17,-48,-17,13,-17,-5,-32,-66,-27,23,16,-14,-2,9,1,7,80,-70,-11,-49,23,10,13,127,-22,27,-10,28,53,-101,18,-23,30,-100,12,8,29,38,28,5,28,1,4,-49,22,59,34,32,-5,-27,20,50,-68,-28,-94,16,-33,12,40,32,-68,-39,9,-35,22,33,45,16,36,21,-13, 
  /* [15][0][][] */ -39,-76,-8,-38,4,11,-6,-64,-23,17,-4,-30,39,-13,46,-16,-90,-4,-18,12,-16,6,-67,-42,-10,1,-5,18,-20,-16,62,-90,-6,28,21,6,-6,23,-95,3,29,-70,1,28,-25,-46,53,31,50,18,-10,-127,-5,46,-1,38,35,-10,-19,42,6,-1,41,-4,3,-8,-11,-8,-23,21,7,36,-40,5,0,-34,-31,-9,5,9,-4,40,-8,69,-15,-42,-33,-32,-43,58,30,79,-37,-3,1,-13, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant5_scale = { 16, { 0.035470928996801376, 0.018024016171693802, 0.0099936500191688538, 0.0093130357563495636, 0.017832057550549507, 0.017203597351908684, 0.015728550031781197, 0.011893454007804394, 0.014203717932105064, 0.011580853722989559, 0.031362708657979965, 0.025069680064916611, 0.019167114049196243, 0.010118396021425724, 0.022174213081598282, 0.024004591628909111, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[96] = { 17883, 62667, -1543, -417, 14582, -4931, 109, -266, 5612, 14060, -4198, 3, 683, 4914, 5013, -8940, -4137, -420, -326, 14030, -10614, 16608, -2189, 9405, 22032, 14, -5623, 15767, 14140, -19792, 1689, 21653, 23722, -9439, 1991, -65, -501, -5, 4313, -7315, -5378, -1051, -9027, -10, 29694, -1491, 13294, -1129, -14781, 2139, -12, 220, -2869, 16143, -3996, 14213, 19201, 62, 35618, -51, -8729, -584, 1582, 4, -1163, 12936, -1133, -7892, -3560, 4107, -58, -4012, 1222, 21, -2010, -6058, -92, -1977, 44975, -6768, -5742, -11612, -105, 220, 61262, -12565, -10475, -27756, -7370, 9554, -2036, 34361, 28, -2029, -2771, 1041, };
const TfArray<96, float> quant6_scale = { 96, { 0.00012910905934404582, 9.0932582679670304e-05, 0.00011728917888831347, 0.000213243329199031, 0.00023139167751651257, 0.00016379226872231811, 5.3993629990145564e-05, 9.7024319984484464e-05, 0.0002395803458057344, 0.0001713791280053556, 0.00027756424969993532, 0.00011955935769947246, 0.00025778025155887008, 0.00020383375522214919, 0.00039246512460522354, 0.0001668170589255169, 0.00021132016263436526, 0.00017261975153815001, 0.00019128329586237669, 7.7116419561207294e-05, 8.1449448771309108e-05, 4.7032975999172777e-05, 0.00014281761832535267, 8.086642628768459e-05, 7.2995586378965527e-05, 0.00010068019037134945, 0.0001809656823752448, 0.00019807997159659863, 7.3024508310481906e-05, 0.00046656816266477108, 0.00037169453571550548, 0.00023814206360839307, 0.00012453897215891629, 0.00017621110600885004, 0.00022245717991609126, 0.00045349134597927332, 0.00038814550498500466, 0.00024265130923595279, 0.00024465934257023036, 0.00011455925414338708, 0.00021786295110359788, 0.00019984683603979647, 0.00034021260216832161, 9.9753786344081163e-05, 0.00035119862877763808, 9.6020907221827656e-05, 0.00011655531852738932, 0.00027605667128227651, 0.00068821798777207732, 0.00010184163693338633, 0.00041827766108326614, 0.00015753883053548634, 0.00018354365602135658, 0.00017371466674376279, 0.00021717666822951287, 0.00012395434896461666, 0.00014305274817161262, 0.00040362359140999615, 4.3209223804296926e-05, 0.00017738899623509496, 0.00033213663846254349, 0.0003304817364551127, 0.00011982467549387366, 0.00015733396867290139, 0.00013288141053635627, 0.00014238824951462448, 0.00027338496875017881, 0.00027708749985322356, 0.00018712744349613786, 0.0001034517990774475, 0.00020060112001374364, 0.00010098250641021878, 0.00028533194563351572, 0.0001418446481693536, 0.00038132347981445491, 0.00031043935450725257, 0.00012318944209255278, 8.4090352174825966e-05, 5.7604640460340306e-05, 0.00018527584325056523, 0.00024840026162564754, 0.00023094052448868752, 0.00017526879673823714, 0.00029014379833824933, 5.7730940170586109e-05, 0.00012133538984926417, 7.7765100286342204e-05, 0.00048079859698191285, 0.00024462930741719902, 0.00012317186337895691, 0.0003781082050409168, 3.2141364499693736e-05, 0.0001569699525134638, 0.00010882657807087526, 0.00036102934973314404, 0.0002730391570366919, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[1*3*3*96] = { 
  /* [0][0][][] */ -46,-72,-10,127,22,71,75,-59,-15,-18,-15,-5,-30,0,37,1,-9,-44,27,22,19,-127,127,5,-84,7,50,-28,-125,-127,39,24,13,26,60,-18,-30,-10,30,-8,-13,27,-108,70,25,-68,37,46,-18,52,-24,19,3,-6,16,48,-90,-50,-60,-19,-11,0,10,38,68,-25,74,13,-8,16,19,127,23,23,26,-1,-11,17,127,-7,-14,15,-28,20,126,20,-76,-16,-1,-32,-15,-38,2,-25,-15,25, 127,-127,75,106,-43,127,39,-118,70,4,-17,127,127,-98,-13,15,11,127,127,-112,127,-76,81,67,-127,-116,-66,-34,-55,46,-59,-20,-89,53,-127,-84,-43,-14,-53,61,-1,127,127,81,-51,-113,-112,-50,-15,-127,43,84,66,-31,45,83,-46,42,-79,-113,-44,-42,-61,67,73,-61,26,30,-81,32,-17,91,117,127,13,19,1,58,-33,52,65,127,127,-23,-9,75,-112,127,-121,-100,5,-127,-90,-127,-38,105, -74,-12,30,-82,15,-26,64,-8,80,-35,-27,18,-19,-5,-9,-13,-9,-16,7,-4,-23,-103,29,-2,-122,97,8,-55,116,50,-15,9,1,14,14,-29,-9,34,19,11,25,12,-118,64,18,-18,37,13,-14,11,-16,5,-10,1,-3,21,-65,6,-32,52,2,41,33,-1,-7,-39,-31,23,10,2,-4,36,10,-25,-5,4,-12,-6,-84,2,-21,-24,-18,3,-110,9,-33,-22,-51,24,-25,-32,29,-26,-14,1, 
  /* [0][1][][] */ -64,-75,74,-36,-48,93,18,127,-52,-21,0,-119,26,-114,78,31,-3,-60,-17,89,53,-70,47,49,-95,-12,127,-22,-25,64,122,-103,-127,90,-86,-56,-36,32,-29,94,-49,-26,-5,46,-48,127,-23,65,16,95,20,-2,14,-54,27,32,127,122,-71,-86,127,-33,-36,127,72,-38,-15,-1,127,39,127,96,-40,102,-5,12,14,13,-31,9,-43,123,-80,110,1,34,-55,30,79,-127,-32,-7,127,-69,-23,0, 67,125,57,-114,127,83,90,38,-127,127,127,-39,-65,-127,-127,127,127,-64,-123,-50,103,95,-123,127,-107,-91,-43,127,-127,109,-127,-127,-89,127,107,127,127,-127,-106,127,-65,-96,110,-127,-127,-36,-127,-127,127,-112,86,43,127,127,127,-127,100,-127,-127,127,20,-80,-127,-99,-127,127,-127,127,-126,-127,-107,-83,-127,-79,127,127,-127,127,-78,127,127,30,-42,-127,60,127,93,45,127,12,127,2,-67,35,127,-127, -53,-13,-50,38,-56,-98,35,-27,19,-34,-28,93,1,92,14,10,-4,64,-6,127,2,-86,-42,6,-73,105,-71,-20,-69,-16,17,-62,-70,38,5,-17,-29,45,-68,41,127,-4,-38,29,-40,-59,16,45,9,118,-11,6,-37,-72,4,19,95,2,1,22,-35,127,92,-52,-43,12,38,-11,-78,122,-18,-86,-1,-54,-17,-21,27,15,77,-36,-70,-42,56,14,-48,-17,72,23,15,62,-43,20,-43,97,-27,-5, 
  /* [0][2][][] */ -67,1,-4,-21,13,-45,65,24,55,-28,-36,-2,18,18,-26,1,-7,65,7,1,-54,-82,2,-9,-27,-54,35,-69,89,39,25,26,17,-9,-11,-46,-7,35,-4,-1,-15,-6,-68,105,4,31,11,36,-15,-31,11,-20,21,-1,9,15,-70,24,-15,14,15,0,-21,-4,-1,-47,-46,15,-33,13,26,30,13,-20,27,4,17,5,-78,-13,-8,-8,17,15,-127,7,12,-43,-59,-50,-27,-48,9,57,-19,-8, 121,33,-127,-35,-72,-25,38,30,-65,-29,-19,-108,-77,111,-13,36,2,-50,-9,-126,92,-51,-39,0,-108,127,-51,20,-35,-21,-9,-4,-62,15,27,5,-23,-28,127,53,11,-14,68,-34,-38,76,-67,-43,-33,-5,-127,-127,-50,-26,1,39,-65,-7,11,39,-7,-18,9,-47,-54,33,64,-22,115,108,-24,-70,12,-58,3,4,99,4,51,22,12,-97,-50,2,3,8,127,40,-61,38,-19,-110,41,79,-10,26, -53,13,-18,26,16,-68,-127,2,-11,-8,-16,4,15,-26,19,-2,-8,-16,5,17,-49,-72,14,1,17,-95,21,3,-48,-39,-7,16,43,-21,-6,-25,-35,3,42,-41,23,-2,-48,-33,3,65,23,16,-9,-4,10,-9,17,6,-4,-5,-61,-13,3,-38,-11,10,84,-10,34,-2,-1,28,1,5,-4,20,-17,16,0,14,35,0,74,-12,3,-8,-8,-17,74,0,43,-39,59,39,-17,-54,-8,2,-14,-16, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0054871346801519394, 0.003864634782075882, 0.0049847899936139584, 0.009062841534614563, 0.0098341461271047592, 0.0069611715152859688, 0.0022947292309254408, 0.0041235336102545261, 0.01018216460943222, 0.0072836130857467651, 0.011796480044722557, 0.0050812726840376854, 0.010955660603940487, 0.0086629344150424004, 0.016679767519235611, 0.0070897247642278671, 0.0089811068028211594, 0.0073363394476473331, 0.0081295398995280266, 0.0032774477731436491, 0.0034616014454513788, 0.0019989013671875, 0.0060697486624121666, 0.0034368231426924467, 0.0031023123301565647, 0.0042789080180227757, 0.0076910411007702351, 0.0084183989092707634, 0.0031035414431244135, 0.019829146564006805, 0.015797017142176628, 0.010121037252247334, 0.0052929064258933067, 0.0074889720417559147, 0.0094544300809502602, 0.019273381680250168, 0.016496183350682259, 0.010312680155038834, 0.010398021899163723, 0.0048687681555747986, 0.0092591755092144012, 0.0084934905171394348, 0.014459035359323025, 0.004239535890519619, 0.014925941824913025, 0.0040808883495628834, 0.0049536009319126606, 0.011732408776879311, 0.029249263927340508, 0.0043282695114612579, 0.017776800319552422, 0.0066953999921679497, 0.0078006051480770111, 0.0073828729800879955, 0.0092300083488225937, 0.0052680596709251404, 0.0060797417536377907, 0.01715400256216526, 0.0018363919807597995, 0.0075390320271253586, 0.014115806668996811, 0.01404547318816185, 0.0050925486721098423, 0.0066866935230791569, 0.0056474595330655575, 0.0060515007935464382, 0.011618860997259617, 0.011776219122111797, 0.0079529164358973503, 0.0043967012315988541, 0.0085255475714802742, 0.0042917565442621708, 0.012126607820391655, 0.006028397474437952, 0.016206247732043266, 0.013193672522902489, 0.0052355509251356125, 0.0035738397855311632, 0.0024481972213834524, 0.0078742234036326408, 0.010557010769844055, 0.0098149720579385757, 0.0074489237740635872, 0.01233111135661602, 0.0024535648990422487, 0.0051567540504038334, 0.0033050165511667728, 0.0204339399933815, 0.010396745055913925, 0.0052348040044307709, 0.016069598495960236, 0.0013660079566761851, 0.0066712228581309319, 0.0046251295134425163, 0.015343747101724148, 0.01160416379570961, } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&g0::quant2_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[96] = { 2433, 9678, 18422, 41379, 21891, -4554, -2369, 7337, 45722, -6284, 15027, 6168, 11548, 16076, 47259, 2108, 3527, 13626, 19387, 8621, -310, 537, 16982, -1442, 6554, 67, 18385, 10398, 9498, 52473, 72042, 24313, 10584, -884, 13883, 3636, 1899, 4608, 30490, -1298, 16903, 13104, 55660, -4779, 36094, 11722, 8612, 21131, 83737, 15610, -729, 11818, -4977, -280, -3350, 9589, -794, 21499, 8172, 12127, 7438, 23320, 9483, 7699, 15525, 12252, 7735, -8909, 10310, -4313, 7173, 13987, 27575, 8231, -6569, -7221, 9631, 439, 3445, -1628, 21020, 17832, 8062, 21731, 4632, 391, 15258, 95280, 14010, 15282, 8582, -289, 9430, 11663, 6926, 16446, };
const TfArray<96, float> quant8_scale = { 96, { 0.00016406027134507895, 0.00015230236749630421, 0.00010253085201838985, 5.5816311942180619e-05, 0.00013580519589595497, 0.00022256819647736847, 0.00034015372511930764, 0.00022246937442105263, 5.1324004743946716e-05, 0.00022015938884578645, 0.00017821804794948548, 0.00014300753537099808, 0.00011007887223968282, 0.00014380768698174506, 5.0468486733734608e-05, 0.0002718004398047924, 0.00012892915401607752, 9.1357047494966537e-05, 0.00011439840454841033, 0.00013800839951727539, 0.00022788731439504772, 0.0004185374709777534, 0.00011840691877296194, 0.00044739403529092669, 0.00039903551805764437, 0.00017208899953402579, 0.00012158285244368017, 0.00013485638191923499, 0.00017189308709930629, 6.7007706093136221e-05, 3.9427304727723822e-05, 0.00010125894186785445, 0.00015689586871303618, 0.00024457709514535964, 0.00014436811034101993, 0.00016234531358350068, 0.00027068975032307208, 0.00031917224987410009, 8.9059205492958426e-05, 0.00042999544530175626, 0.00011102970165666193, 0.00012003694428130984, 4.8450208851136267e-05, 0.00022075993183534592, 8.9982597273774445e-05, 0.00013151773600839078, 0.00020216914708726108, 0.00012684366083703935, 4.9207807023776695e-05, 0.00013440071779768914, 0.00016809422231744975, 0.00014520816330332309, 0.00021334608027245849, 0.0001650999765843153, 0.00030742547824047506, 0.00011491165059851483, 0.00013633028720505536, 8.7033360614441335e-05, 0.00024933851091191173, 0.00012179413170088083, 0.00021581248438451439, 6.0174883401487023e-05, 0.00015552654804196209, 0.00012814720685128123, 0.00015933462418615818, 0.0001574272318976, 0.00016733443771954626, 0.00014966398885007948, 0.00016342918388545513, 0.00016458505706395954, 0.00015457914560101926, 0.00011318322503939271, 7.5562995334621519e-05, 0.00012487704225350171, 0.00023565227456856519, 0.00018814629584085196, 0.00017228846263606101, 0.00023563826107420027, 0.00021935428958386183, 0.00024442875292152166, 9.6780880994629115e-05, 9.3490336439572275e-05, 0.00010873764404095709, 8.8976339611690491e-05, 0.00024957011919468641, 0.0002152390661649406, 0.00015338767843786627, 4.0431994420941919e-05, 0.00010097920312546194, 0.00014807502157054842, 0.00014783232472836971, 0.0002587558701634407, 0.00015510043886024505, 0.00013719046546611935, 0.0001632770145079121, 0.00010416650184197351, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[96*1*1*16] = { 
  /* [0][0][][] */ 0,65,-25,78,26,32,12,-14,31,35,-59,103,5,-127,44,-126, 
  /* [1][0][][] */ 20,51,-10,-22,26,-29,127,-107,1,87,-13,-18,5,-48,33,12, 
  /* [2][0][][] */ -127,34,-36,-23,0,-7,55,93,-32,55,109,-18,-65,15,32,-51, 
  /* [3][0][][] */ -70,65,50,64,-51,58,73,127,11,69,-120,6,42,-73,-88,-61, 
  /* [4][0][][] */ 13,-1,35,65,-19,65,-3,46,7,-16,-2,-4,23,-4,-127,-23, 
  /* [5][0][][] */ -7,-30,58,-22,8,-24,-5,27,-69,101,-30,-127,-15,24,-55,-25, 
  /* [6][0][][] */ 15,0,33,-11,41,59,-67,-71,-8,-2,46,-14,127,-24,-16,-36, 
  /* [7][0][][] */ 20,12,127,-13,-22,-38,7,-8,-79,27,-82,-46,11,-7,34,-14, 
  /* [8][0][][] */ 21,30,78,67,-57,85,21,47,43,5,12,-93,-38,6,-127,-79, 
  /* [9][0][][] */ 32,-119,57,47,12,-33,1,21,127,2,81,10,-28,7,-109,-32, 
  /* [10][0][][] */ -40,-95,5,-19,-102,9,-14,59,100,127,46,-28,-29,64,83,-7, 
  /* [11][0][][] */ 45,-18,8,-95,15,-28,-110,-127,-54,42,-10,-30,31,-24,41,-64, 
  /* [12][0][][] */ -15,5,10,-40,-35,-39,-96,-17,-46,-74,-25,16,25,127,89,46, 
  /* [13][0][][] */ -35,-100,-68,30,-10,-67,0,-24,52,12,-13,-13,23,18,127,31, 
  /* [14][0][][] */ 1,-59,57,30,24,33,10,127,21,55,12,-40,13,44,-61,119, 
  /* [15][0][][] */ 21,-33,2,61,16,-3,95,0,5,-127,14,-35,0,-21,-7,-36, 
  /* [16][0][][] */ 39,-84,-46,32,12,8,39,-71,127,68,94,4,7,105,64,116, 
  /* [17][0][][] */ -74,-70,56,127,115,55,8,-22,120,-52,-11,-45,19,57,-119,34, 
  /* [18][0][][] */ -11,14,1,19,-102,-1,-11,40,-66,-22,-20,-46,5,-127,67,-3, 
  /* [19][0][][] */ 57,-64,49,-73,97,32,-110,94,99,-85,81,49,-15,68,47,127, 
  /* [20][0][][] */ 43,-21,67,-62,-9,10,-34,49,-15,-52,94,-14,11,14,-39,127, 
  /* [21][0][][] */ -64,-15,0,-37,15,13,-81,-51,-23,61,2,12,-127,-14,33,-8, 
  /* [22][0][][] */ 25,-25,25,-28,16,-65,6,-16,-127,26,-14,-42,-18,-15,77,-21, 
  /* [23][0][][] */ 15,6,17,-8,6,10,-9,3,-8,-6,42,-13,127,-6,1,-37, 
  /* [24][0][][] */ -13,1,2,-65,-28,-19,46,9,-53,-2,-9,-127,5,-100,42,12, 
  /* [25][0][][] */ -111,14,-47,-5,61,-27,-77,-127,-31,57,-31,-58,-78,-85,22,-47, 
  /* [26][0][][] */ 38,-10,53,-109,127,-31,0,-1,122,-50,40,-32,-10,104,3,79, 
  /* [27][0][][] */ 99,-29,21,-29,-33,-54,-3,-20,-27,20,-127,14,16,-14,1,40, 
  /* [28][0][][] */ -119,-19,-127,-81,50,-13,73,-55,-1,52,-63,16,43,-10,-41,47, 
  /* [29][0][][] */ -64,-32,-4,127,-9,19,8,-41,-9,0,-79,49,22,-74,28,-37, 
  /* [30][0][][] */ 57,-14,127,-20,55,44,-30,75,-36,-79,59,-36,-9,26,-69,71, 
  /* [31][0][][] */ 13,-87,2,-48,-1,-62,18,-40,-15,41,102,18,-21,94,66,127, 
  /* [32][0][][] */ -14,72,-34,38,-127,23,-72,-41,-55,-33,0,49,10,51,34,60, 
  /* [33][0][][] */ 29,-16,28,127,21,2,21,-45,-102,49,61,-22,5,2,5,102, 
  /* [34][0][][] */ 36,-1,12,-5,76,-43,-127,-21,-46,87,-40,4,-29,8,6,10, 
  /* [35][0][][] */ 71,15,-12,1,19,-127,-26,-8,-25,0,-84,-2,75,21,-6,18, 
  /* [36][0][][] */ 21,-1,-127,6,44,13,-32,22,-32,-19,1,-10,2,13,-18,10, 
  /* [37][0][][] */ 1,-1,127,-6,-58,24,22,-59,-12,28,-48,18,21,-10,14,-3, 
  /* [38][0][][] */ -127,35,-2,27,26,79,12,-21,13,-19,126,-28,-31,12,-12,-22, 
  /* [39][0][][] */ -17,-6,16,34,33,-12,-127,36,12,29,-2,-34,-2,-20,-1,-5, 
  /* [40][0][][] */ 2,76,-21,127,11,47,57,35,-69,-34,-27,57,20,44,-65,-29, 
  /* [41][0][][] */ 16,13,-41,-23,-51,-2,127,92,-50,84,-30,-3,2,64,39,-9, 
  /* [42][0][][] */ 38,-52,-28,-16,32,37,-64,69,86,-97,127,46,-18,45,-62,40, 
  /* [43][0][][] */ -74,3,27,-39,34,19,-76,-79,-27,43,2,-15,-127,-14,35,-7, 
  /* [44][0][][] */ 7,6,-15,-7,-4,-20,-3,-48,127,-4,19,43,17,75,2,45, 
  /* [45][0][][] */ -65,-86,11,-97,34,-10,-15,51,16,-76,-20,-28,30,110,-41,127, 
  /* [46][0][][] */ -43,17,-27,90,-81,-25,3,-74,-127,41,-45,-13,-2,31,1,-38, 
  /* [47][0][][] */ -28,-16,-101,127,3,58,-2,-23,11,51,55,58,-23,-16,23,-21, 
  /* [48][0][][] */ -12,0,25,-127,21,-40,-15,-7,-52,12,26,-19,-12,58,101,45, 
  /* [49][0][][] */ -22,24,51,120,-14,43,-57,-15,22,-50,-94,-44,-31,-47,-97,-127, 
  /* [50][0][][] */ 2,68,24,-113,62,16,-20,56,127,-18,-34,10,3,-41,15,-28, 
  /* [51][0][][] */ 11,-29,21,-6,46,-10,-53,-127,14,-71,-5,-1,-14,-12,-11,-12, 
  /* [52][0][][] */ 24,18,-8,33,38,-16,-67,103,-83,127,-42,-40,82,104,7,-39, 
  /* [53][0][][] */ -8,98,5,-95,-39,-8,30,-24,-63,-49,-43,51,16,-127,-88,-8, 
  /* [54][0][][] */ -2,10,17,32,48,-24,7,-34,-3,28,-13,-20,-8,127,-43,-13, 
  /* [55][0][][] */ -125,127,92,-21,48,4,-19,-4,-50,29,108,-15,-15,-29,119,-14, 
  /* [56][0][][] */ 61,1,21,-118,90,-1,-14,35,57,-52,49,127,-25,14,95,56, 
  /* [57][0][][] */ -23,-2,17,66,-21,18,42,127,-5,3,6,-26,3,52,6,18, 
  /* [58][0][][] */ 21,127,-2,-122,6,34,-11,20,107,-7,-3,81,6,-88,43,65, 
  /* [59][0][][] */ 29,50,47,-115,-45,-4,28,-7,8,24,29,-69,-14,-127,-70,19, 
  /* [60][0][][] */ 51,-11,113,-43,-37,127,30,-36,-12,35,-50,-11,28,9,30,-6, 
  /* [61][0][][] */ -27,29,-48,-49,-59,9,110,127,-18,74,-8,13,11,78,23,-33, 
  /* [62][0][][] */ -13,-2,-7,-1,-81,32,-61,11,-26,-23,-6,-54,15,-127,81,2, 
  /* [63][0][][] */ 13,-31,-2,-89,42,-2,-123,-127,-58,97,-18,10,58,1,25,-40, 
  /* [64][0][][] */ -26,-3,34,47,74,-2,-35,-127,29,-111,0,-42,-5,-22,-6,5, 
  /* [65][0][][] */ -127,18,29,-63,15,77,45,-50,-76,31,50,-11,-1,16,-17,-30, 
  /* [66][0][][] */ 65,9,87,16,-54,16,-26,50,-50,-7,66,-88,-20,51,-127,-18, 
  /* [67][0][][] */ 39,-32,-40,63,58,-49,-83,-109,43,-127,-73,-34,-97,16,-82,25, 
  /* [68][0][][] */ 13,-29,-71,54,-55,-91,3,-55,-35,-15,41,-66,-28,57,127,-14, 
  /* [69][0][][] */ -28,36,-71,57,-12,-126,26,83,26,7,52,-14,127,33,-16,4, 
  /* [70][0][][] */ 10,10,-38,-38,-44,9,127,94,-21,53,-19,10,13,42,16,-5, 
  /* [71][0][][] */ 10,-9,-27,-51,24,3,10,56,-29,-44,-10,-1,12,-127,74,10, 
  /* [72][0][][] */ 33,32,-11,33,31,-41,-46,-127,18,59,-51,18,47,59,42,50, 
  /* [73][0][][] */ -46,-127,-29,-66,-85,-19,37,-30,-21,12,-33,-35,20,-49,64,-6, 
  /* [74][0][][] */ -29,29,62,101,-6,5,-127,97,24,-34,-39,-41,-1,-9,-15,-2, 
  /* [75][0][][] */ -56,32,-37,15,-29,94,90,127,-3,58,2,-35,-118,77,14,21, 
  /* [76][0][][] */ 13,-21,-40,-23,44,-72,-127,-114,-21,-16,11,-8,42,-7,73,-33, 
  /* [77][0][][] */ -33,9,-33,-23,-44,-3,-13,-42,127,7,-64,9,-7,46,25,-82, 
  /* [78][0][][] */ -106,-127,-12,93,71,68,-29,35,0,-69,-110,85,51,-26,100,63, 
  /* [79][0][][] */ 38,-11,32,-54,127,8,48,16,80,24,3,31,-4,-26,11,-39, 
  /* [80][0][][] */ -12,-33,63,-109,-24,-46,3,7,-81,-40,-12,-53,1,127,-37,15, 
  /* [81][0][][] */ 18,-9,41,39,9,49,-17,-16,7,-9,-3,-38,-4,33,-127,16, 
  /* [82][0][][] */ -84,-25,29,-127,-11,-37,-3,-47,-34,-35,-50,-119,-19,-120,-100,30, 
  /* [83][0][][] */ -2,10,-27,-67,-46,11,-4,39,-75,-1,10,-76,20,-127,9,49, 
  /* [84][0][][] */ 127,35,20,49,-55,3,-58,23,-7,-21,107,7,-72,19,83,-78, 
  /* [85][0][][] */ -8,-21,17,-32,44,-6,-43,117,-85,-116,-69,-35,-21,79,83,-127, 
  /* [86][0][][] */ 18,-2,8,0,-54,65,-40,45,-92,-49,30,-23,-14,-127,-14,28, 
  /* [87][0][][] */ 127,-43,20,-2,-37,-32,1,-2,7,15,-110,13,37,-7,-1,35, 
  /* [88][0][][] */ 40,84,-24,3,-12,-23,-22,-18,107,22,36,40,-26,-38,127,-122, 
  /* [89][0][][] */ 42,68,-86,-19,-37,-23,28,-67,49,51,25,-34,-40,-1,-21,-127, 
  /* [90][0][][] */ -13,-29,1,-79,-72,14,127,-67,92,-80,16,-81,43,-21,-38,-14, 
  /* [91][0][][] */ 11,5,-21,-98,-43,-1,30,-40,-53,24,63,49,12,-20,36,127, 
  /* [92][0][][] */ 16,3,7,13,56,-14,-71,-127,44,-62,-4,-29,-35,-16,-4,-21, 
  /* [93][0][][] */ 69,5,38,-127,-39,-4,-26,50,45,-74,81,-20,-36,116,-24,25, 
  /* [94][0][][] */ -104,45,-96,14,65,-127,-16,4,-5,-49,91,-28,-1,-3,-17,-6, 
  /* [95][0][][] */ -25,59,21,-127,-5,-2,-29,3,21,-31,-59,-73,-2,30,-64,-8, 
};
const TfArray<96, float> quant9_scale = { 96, { 0.00072880735388025641, 0.00067657505860552192, 0.00045547433546744287, 0.00024795363424345851, 0.00060328945983201265, 0.0009887180058285594, 0.0015110699459910393, 0.00098827900364995003, 0.00022799738508183509, 0.0009780173422768712, 0.00079170067328959703, 0.0006352845230139792, 0.00048900500405579805, 0.000638839032035321, 0.00022419690503738821, 0.0012074231635779142, 0.00057274388382211328, 0.00040583676309324801, 0.00050819374155253172, 0.00061307672876864672, 0.0010123471729457378, 0.0018592752749100327, 0.00052600080380216241, 0.0019874651916325092, 0.0017726414371281862, 0.00076447351602837443, 0.00054010929306969047, 0.00059907452668994665, 0.00076360319508239627, 0.00029766932129859924, 0.00017514849605504423, 0.00044982408871874213, 0.00069698086008429527, 0.001086488482542336, 0.00064132857369259, 0.00072118901880457997, 0.0012024891329929233, 0.0014178636483848095, 0.00039562903111800551, 0.0019101750804111362, 0.00049322890117764473, 0.00053324189502745867, 0.00021523107716348022, 0.00098068511579185724, 0.00039973104139789939, 0.00058424315648153424, 0.00089809898054227233, 0.00056347949430346489, 0.00021859657135792077, 0.00059705029707401991, 0.00074672745540738106, 0.00064506038324907422, 0.00094775046454742551, 0.00073342607356607914, 0.0013656807132065296, 0.00051047373563051224, 0.00060562207363545895, 0.00038662960287183523, 0.0011076402151957154, 0.00054104789160192013, 0.00095870700897648931, 0.00026731577236205339, 0.00069089786848053336, 0.00056927022524178028, 0.00070781458634883165, 0.0006993412971496582, 0.00074335222598165274, 0.00066485453862696886, 0.00072600389830768108, 0.0007311386289075017, 0.00068668922176584601, 0.00050279550487175584, 0.00033567461650818586, 0.00055474316468462348, 0.0010468416148796678, 0.0008358050836250186, 0.00076535961125046015, 0.0010467793326824903, 0.00097444083075970411, 0.0010858294554054737, 0.00042993115494027734, 0.00041531349415890872, 0.00048304683878086507, 0.00039526089676655829, 0.0011086689773947001, 0.00095615972531959414, 0.00068139634095132351, 0.00017961165576707572, 0.00044858141336590052, 0.00065779587021097541, 0.00065671774791553617, 0.0011494749924167991, 0.0006890049553476274, 0.00060944323195144534, 0.00072532787453383207, 0.00046274039777927101, } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[16] = { -3748, -4930, -12246, 32109, 26553, 4392, -5640, -4441, 25016, 2682, 28056, 23627, -9984, 12415, 35941, -29844, };
const TfArray<16, float> quant10_scale = { 16, { 0.00044954550685361028, 0.00027444533770903945, 0.00027961458545178175, 0.00023549317847937346, 0.00038139606476761401, 0.00032934831688180566, 0.00031491348636336625, 0.0003803997824434191, 0.00020431220764294267, 0.0002650624664966017, 0.00037236657226458192, 0.00068335089599713683, 0.00047637286479584873, 0.00048513861838728189, 0.0004665565793402493, 0.0002999218413606286, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[16*1*1*96] = { 
  /* [0][0][][] */ -1,18,-10,19,45,69,-36,-29,45,3,13,8,-10,13,23,68,1,-7,-8,-7,98,-56,8,-16,-23,-36,-42,-95,-6,-5,46,48,118,-5,4,-2,9,-20,-20,9,-32,13,19,-31,3,-30,-13,25,-13,20,2,-9,-34,-13,7,-4,38,23,-21,-25,-60,30,-10,-10,13,9,56,1,12,4,1,-27,-62,-4,-1,3,-7,-89,7,-18,38,-19,-58,-43,29,-13,6,25,-7,3,19,-32,23,20,-12,127, 
  /* [1][0][][] */ 78,-97,44,82,-11,-66,-16,-44,-25,-92,-7,26,10,-62,-35,-54,-84,-5,24,22,-36,-109,-39,27,127,-65,-74,16,-28,94,-16,51,11,13,-43,24,-21,-11,50,-26,1,-78,76,-34,-56,16,56,-5,35,22,0,-71,64,-78,40,-22,22,28,-17,-107,37,-67,20,-51,4,-84,34,46,41,51,-39,1,-97,39,-21,66,37,96,18,-22,42,6,-75,35,-83,64,-1,63,-43,12,20,10,7,-45,40,1, 
  /* [2][0][][] */ 28,17,14,-29,5,-1,-10,37,65,-16,14,71,-1,10,48,6,-12,-14,14,-8,-20,-65,6,-58,-1,-15,-28,25,-8,21,127,-61,18,-73,-25,61,17,126,-44,-24,1,-18,-5,36,-46,-50,-63,25,29,31,-33,-34,26,-1,-4,-31,-26,2,-4,28,3,5,77,93,7,-80,19,-74,-11,-17,-13,9,-16,11,-22,15,15,58,6,20,13,92,28,-13,-12,5,11,5,25,3,-4,-52,-44,4,-7,66, 
  /* [3][0][][] */ -11,-19,-33,35,26,-22,-2,-23,-16,14,2,5,7,-16,43,-8,40,-40,22,8,-18,-10,-12,0,-17,10,9,-7,22,-46,62,-20,15,-14,-14,49,-12,-8,-12,7,10,-66,21,-30,-5,5,1,1,-127,45,-15,22,-118,-59,-27,-37,28,10,-14,53,-7,20,9,15,-17,-92,-36,27,55,15,-1,26,-39,12,-9,-49,-50,-54,25,-38,11,-20,18,68,38,56,35,13,32,-8,-10,6,-31,-1,-16,-27, 
  /* [4][0][][] */ 0,-30,16,-72,-1,-14,-50,6,-22,-46,-29,-11,7,73,10,7,52,-12,7,2,-6,30,53,4,-3,-4,18,11,4,-9,-5,-7,-36,10,2,17,36,-23,3,-10,12,8,-101,-30,32,-8,-10,-15,5,82,-13,-19,-22,-18,8,-7,-3,-31,26,33,11,7,4,-7,38,-116,24,-22,-48,14,-16,-1,-12,16,-19,30,-23,65,55,5,11,5,127,-39,41,-20,-12,-4,67,8,-3,19,-35,25,-5,-44, 
  /* [5][0][][] */ -8,1,-2,-7,-8,-5,-2,113,58,-18,-13,-31,-11,24,35,31,-17,-10,2,-41,-48,-13,-4,-54,13,7,24,75,72,7,69,47,-50,18,0,-6,-53,-55,-31,-16,-38,-16,-11,-5,64,14,7,12,14,9,-21,8,-28,-17,2,-6,-23,-17,-9,33,-52,22,-23,-43,9,13,-23,7,-6,15,5,-1,34,9,7,-5,-8,26,9,127,-6,-43,22,32,3,-3,22,-32,-3,-25,19,-127,-35,-21,-10,-118, 
  /* [6][0][][] */ -26,-5,-11,-54,-4,-19,-15,14,-4,20,-15,-2,36,-64,6,-12,-4,-66,29,11,3,4,-19,21,75,-8,-1,0,19,-7,13,-10,-22,1,-22,3,20,4,20,35,-4,-29,-49,-20,-5,-22,26,-127,22,34,18,11,10,3,-7,-43,36,-8,-6,6,20,19,3,7,38,64,25,-21,-22,-11,15,-23,17,6,44,-7,-29,27,4,3,-16,-6,49,-30,-2,43,20,-20,23,7,-37,-7,-21,10,-7,14, 
  /* [7][0][][] */ 15,10,35,-24,-6,2,-5,-25,-5,-12,-16,-14,-9,-92,26,5,-4,-34,-15,-9,10,-16,-36,-5,-20,-11,1,-17,10,7,7,1,-12,4,-9,-18,2,-11,-29,25,7,-13,-20,30,-5,14,-15,75,-2,25,-15,-25,-26,5,-2,-50,41,0,-2,1,-5,6,-12,-7,-21,39,14,-27,-13,-7,5,40,-9,-10,-13,7,52,7,-3,-21,5,-35,36,-1,-34,127,-3,-1,-33,-21,-2,20,-23,-2,-5,5, 
  /* [8][0][][] */ -67,43,-58,1,44,-8,-16,27,14,73,-44,9,14,35,73,-15,-4,32,-78,17,17,27,-33,-1,-40,-24,22,11,50,-92,0,-5,26,7,12,-9,-19,31,-41,47,9,13,5,-127,-39,-7,45,-26,-51,20,2,69,-107,75,20,-4,7,-20,-25,-19,0,-39,7,20,-31,34,31,-23,-10,2,28,80,-23,33,39,37,-8,-93,-1,-37,-16,-14,22,5,-63,5,13,-45,2,36,-27,6,35,-14,-18,-13, 
  /* [9][0][][] */ 26,-56,-34,-35,17,23,-20,21,27,-17,-2,13,-43,-25,7,19,-5,4,38,-20,-23,6,-26,-44,33,11,29,-12,-32,-35,-19,-2,-9,13,20,33,6,41,-36,19,12,12,-20,-87,8,-11,27,-127,-33,-1,-2,26,-15,6,-13,6,-42,25,-11,15,12,11,12,29,24,110,35,44,10,-10,12,-23,-12,1,-34,9,69,-3,13,11,-11,3,12,-41,2,25,-4,0,-47,33,-35,0,6,9,6,-17, 
  /* [10][0][][] */ 27,50,-20,33,68,-114,-12,-28,4,50,31,-6,-13,23,15,-77,17,39,-23,38,-87,-11,-11,-30,-65,-28,-55,49,14,8,2,37,-12,-15,32,-13,78,-22,-12,-7,-16,65,48,-22,-57,-12,-40,11,-20,-20,-39,-3,-13,-12,6,-13,11,31,-23,-17,0,6,-15,23,9,43,56,28,25,-1,28,54,-52,-23,-58,-12,0,27,-18,11,28,-5,-67,-31,62,-51,97,-11,-20,12,26,-17,81,38,-14,-127, 
  /* [11][0][][] */ 43,40,-31,23,-5,15,53,4,-4,-17,-24,-12,0,1,35,2,-2,-9,-98,-6,1,13,5,-8,-43,-21,-10,3,3,18,1,-6,-6,7,6,20,9,13,-7,20,5,27,59,-96,29,-38,3,-5,-127,12,11,-48,24,18,-10,12,-14,-13,7,3,14,-17,-9,7,-51,52,-18,11,16,-2,25,10,-51,-27,12,29,-4,-36,-51,5,10,-3,88,46,6,-9,-13,-10,3,23,-17,-2,-2,8,-22,13, 
  /* [12][0][][] */ -31,-5,8,-3,-25,33,13,1,127,6,-13,4,0,7,-36,-39,25,27,10,75,55,29,-9,-21,1,10,17,-26,-104,6,31,-37,4,-6,-8,-19,18,-1,40,-10,-47,-18,-5,11,2,28,7,-3,18,5,-41,11,8,-2,9,-6,70,-26,12,15,18,-13,12,-11,-4,30,-39,2,-2,7,-15,-33,16,11,-68,5,27,-5,11,-60,-13,7,39,38,-16,-14,-27,-25,8,17,-4,46,-14,-22,13,8, 
  /* [13][0][][] */ 29,-11,-27,28,29,-2,8,1,-7,2,9,-3,11,-10,12,-13,16,-70,-34,11,-10,-18,9,4,10,10,0,-4,-11,-32,-6,15,0,5,7,43,16,-1,7,16,-1,8,22,36,17,17,-11,-127,20,-3,5,6,-15,-4,18,6,-11,16,22,12,6,17,-6,5,-11,-20,-18,-52,5,14,-10,-31,-13,36,-8,20,-24,1,15,-2,26,-11,-13,17,13,26,9,18,-4,-1,22,-6,2,13,-9,-7, 
  /* [14][0][][] */ -116,-50,27,54,33,-28,-31,14,-16,8,-11,13,64,9,-127,1,78,-15,-17,32,-12,-7,38,21,-108,8,33,-13,-40,-78,-32,0,-4,3,25,-70,30,36,1,23,20,34,-1,-33,18,122,72,58,-115,51,12,35,-51,-4,36,-4,9,11,64,60,35,50,12,49,-1,-14,-44,47,9,80,-55,-84,-81,1,-3,46,-10,42,88,0,59,16,36,28,44,12,48,34,26,47,71,-5,1,27,23,-27, 
  /* [15][0][][] */ 92,-27,38,6,-3,75,36,-22,-16,53,8,5,-89,-8,-12,35,11,43,51,-14,11,23,-89,71,25,10,48,-2,26,43,-64,-78,13,-53,44,1,42,-36,-56,-106,-7,35,4,37,-1,53,-25,-38,106,-43,-52,26,44,-125,68,-109,3,-63,19,24,-127,0,19,23,81,-21,-55,47,-31,77,-28,21,45,27,20,7,24,-56,69,-16,-12,-1,41,82,-15,-2,-1,-54,3,-6,72,0,-67,61,25,-11, 
};
const TfArray<16, float> quant11_scale = { 16, { 0.019105684012174606, 0.011663926765322685, 0.011883620172739029, 0.010008459910750389, 0.016209332272410393, 0.013997303321957588, 0.01338382251560688, 0.016166990622878075, 0.0086832689121365547, 0.011265154927968979, 0.015825578942894936, 0.029042413458228111, 0.02024584636092186, 0.020618390291929245, 0.019828654825687408, 0.012746677733957767, } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[96] = { 9951, -9247, 2858, 52564, -1291, -4343, -11492, 2186, -2810, 1192, 2851, -1332, 1355, -6869, 5236, -5725, -1378, 16914, 26067, 2139, 1509, -2615, 19, 94, 18200, -1137, -785, -3562, -6008, -7586, 5519, -9175, -122, -393, 63, 13093, 1454, -3615, 19366, 475, -13, 1954, -9947, -7652, -7077, 67295, 352, 12873, 27657, -12400, 25, 8443, 7388, -366, -5387, 2291, -12588, 1903, 2048, -6660, -1583, -921, -13012, -429, 1462, 16195, 28911, 27003, -12284, 436, -7592, -869, 52653, 8439, 16, 935, 18660, 32721, -264, -7566, -1511, -7984, 1068, -3418, 668, 585, 1253, -357, 1468, -2523, -17, 79, -25, -405, 497, 49703, };
const TfArray<96, float> quant12_scale = { 96, { 0.00018060025468003005, 0.00011516554513946176, 0.00027700042119249701, 4.0921953768702224e-05, 0.00017807459516916424, 0.00015935694682411849, 0.00029138947138562799, 8.5851039330009371e-05, 0.00014239797019399703, 0.00040915756835602224, 0.00015971747052390128, 0.00034495539148338139, 9.1435969807207584e-05, 0.00039411752368323505, 0.00019109310233034194, 0.00014560700219590217, 0.00010229583858745173, 0.00029607649776153266, 5.7743051002034917e-05, 0.00031383015448227525, 5.2654104365501553e-05, 0.00018711117445491254, 0.000123887017252855, 0.00037769216578453779, 0.00018952044774778187, 0.00023810808488633484, 0.00015840402920730412, 0.00017239795124623924, 0.00012603632058016956, 0.00010636854131007567, 0.00014816936163697392, 0.00017446641868446022, 0.00012632954167202115, 0.00015870474453549832, 0.00021249362907838076, 0.00017583818407729268, 0.00039284778176806867, 0.00012148693349445239, 4.2860094254137948e-05, 0.00013752152153756469, 0.00024176073202397674, 0.00033261138014495373, 0.00033540721051394939, 0.0001440520427422598, 0.00020194862736389041, 4.6460998419206589e-05, 0.00020964174473192543, 0.00027132927789352834, 9.2506990768015385e-05, 0.00018739141523838043, 0.00021152457338757813, 0.000154768509673886, 0.00023693261027801782, 0.00028264705906622112, 0.00028677476802840829, 0.00043047964572906494, 0.00030290943686850369, 0.00021238703629933298, 0.00011217800056328997, 8.1028578279074281e-05, 0.00029862351948395371, 0.00013967785343993455, 0.00027049958589486778, 0.00013550897710956633, 0.00019393062393646687, 0.00017713250417727977, 8.2140184531453997e-05, 6.5731204813346267e-05, 0.0003278627700638026, 0.0002424740232527256, 0.00022238581732381135, 0.0001055699831340462, 0.00010918039333773777, 0.00012732630420941859, 0.00016333449457306415, 0.00026674929540604353, 0.0005367567646317184, 5.2947190852137282e-05, 0.0002670266549102962, 0.0002512243518140167, 0.00016084902745205909, 0.00026586654712446034, 0.00010780179582070559, 0.000161361662321724, 0.00012976313882973045, 9.2818467237520963e-05, 0.00013586420391220599, 0.00019892079581040889, 0.00019133281602989882, 0.00010781522723846138, 0.00020159882842563093, 0.00012104737106710672, 0.00014604318130295724, 0.00043212136370129883, 0.0026804718654602766, 7.7038486779201776e-05, } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[1*3*3*96] = { 
  /* [0][0][][] */ -17,6,-20,104,-17,23,-62,-53,17,-6,99,-9,3,-8,-4,54,5,16,-34,3,74,3,32,-33,2,17,44,49,21,13,24,48,-7,27,10,-15,5,48,-59,-26,20,9,27,17,-85,-56,25,-5,-11,-20,-8,-6,49,5,-9,2,-3,-36,28,-31,27,-2,127,27,-13,-11,11,-53,66,35,2,-7,79,-32,69,4,17,-127,29,64,1,15,127,-14,38,29,-29,-19,35,-7,-14,81,1,20,-2,12, -48,12,-8,10,52,-8,-10,-127,38,14,-127,-5,-17,-12,4,92,18,-30,-14,-16,76,-96,127,26,-61,-31,-105,-16,27,36,-49,18,119,12,-14,-1,-24,127,-64,-127,9,-19,-30,14,46,-127,127,-44,-76,50,49,7,39,-64,31,56,36,42,-101,84,127,34,4,-20,43,-38,-96,-1,37,-30,-18,46,-48,-48,106,-4,-30,-60,-33,64,-67,62,-16,9,-11,48,54,-41,-28,54,-13,72,-127,-31,23,-127, 0,-4,-23,-74,8,18,38,22,-4,-2,5,62,0,-12,-10,6,-12,17,-16,17,6,25,24,-32,1,-31,10,12,-7,5,46,-79,44,17,9,-22,12,3,-30,-21,7,3,-16,8,23,-32,21,1,7,-8,6,-5,5,6,-6,8,-7,44,7,-2,11,-18,3,-17,-27,-17,31,-50,-106,-7,41,-18,-127,-22,-12,17,10,-11,6,11,-13,23,-36,-3,-40,21,26,36,-24,-17,25,-12,19,7,-2,-45, 
  /* [0][1][][] */ -40,59,-18,37,-85,-16,-11,-44,26,96,-44,-21,-31,-24,-7,63,127,-24,-90,-13,58,-127,-29,16,-35,-47,-127,-6,37,36,-49,28,-127,-75,-57,3,65,-3,-51,46,-19,86,1,-3,35,-51,-12,-32,127,43,-4,21,44,9,-36,-17,31,9,-124,127,-36,-89,21,127,-59,-36,-85,126,-36,127,-18,53,-35,-55,37,8,-35,-70,127,48,127,35,6,-1,127,29,-96,47,-38,-35,-102,40,98,103,29,-59, 127,127,127,127,-46,-127,127,23,127,-127,16,-127,-107,127,127,127,-16,-127,-61,-127,127,23,-68,127,127,127,-55,-127,127,127,-127,127,-9,-127,-124,127,-127,-44,95,109,-127,-127,127,127,127,-117,-107,127,-13,127,-127,-127,-127,127,127,-127,127,-127,-43,40,-105,-27,-70,-68,127,127,-72,127,127,-107,-127,127,-42,127,-127,-127,-127,124,-75,127,-43,127,79,127,-38,-127,-25,-107,-127,-127,-23,-127,-22,-127,-127,117, -24,66,-38,2,127,70,-21,49,5,23,-13,-5,-26,-31,-13,-7,-104,-22,-127,39,30,77,-12,-115,-34,-41,124,72,10,35,72,8,125,-47,127,-3,55,5,-93,14,36,23,-23,1,-23,-52,-12,-42,81,14,-12,40,-6,-4,-75,-14,24,20,127,-89,2,127,0,-36,-111,-28,-75,100,15,-17,112,24,-17,-56,12,47,-29,-7,-43,-3,-46,8,46,24,-89,35,127,-47,32,-22,127,-10,-113,35,34,19, 
  /* [0][2][][] */ -4,-40,-21,-61,-4,14,40,31,-2,10,-20,52,24,-34,-7,7,41,2,13,21,-10,30,-17,-25,2,-24,9,3,-10,-7,49,-75,-38,67,-28,-25,31,-35,-63,17,9,9,-34,20,13,-77,-12,-1,-9,6,17,-8,7,1,-22,6,-1,44,-49,34,-5,-12,5,17,-6,-10,22,-53,-56,11,-21,-12,-119,-32,0,18,14,-12,56,17,22,22,-40,15,12,25,-21,10,5,25,23,-6,20,40,-7,-30, -28,-10,-27,23,-45,74,-25,66,6,-6,54,-12,127,-7,-18,-18,-1,-40,-56,24,-23,79,-45,-111,-47,-47,101,70,13,43,54,-2,-123,63,-15,-23,-29,-27,-127,-4,45,-14,-15,37,-26,-44,-18,-48,-60,28,68,25,-11,-80,29,52,17,26,75,-55,20,-57,-8,0,19,-26,-127,-56,-11,-27,-63,23,36,-46,-30,-7,-44,23,-56,1,49,35,19,11,5,63,-92,127,16,127,-30,-19,115,-21,46,83, -9,-34,-26,29,12,65,-43,13,4,-7,0,14,12,-50,-10,-13,-44,-6,18,20,-24,6,-21,4,-4,19,-3,52,-2,-6,34,29,17,42,19,-23,-6,-26,-30,8,11,-12,22,9,-74,-32,-13,4,-2,-16,-1,-4,-9,9,-17,-5,-1,-50,13,-29,-21,49,9,-29,-10,-2,36,-55,45,7,52,-21,31,-55,-18,22,11,11,-5,22,-30,32,89,-14,-17,55,38,-9,109,12,2,-19,10,-22,-6,-50, 
};
const TfArray<96, float> quant13_scale = { 96, { 0.0076755108311772346, 0.0048945355229079723, 0.011772518046200275, 0.0017391829751431942, 0.0075681703165173531, 0.0067726699635386467, 0.012384052388370037, 0.0036486692260950804, 0.0060519138351082802, 0.017389196902513504, 0.0067879920825362206, 0.014660603366792202, 0.0038860286585986614, 0.016749994829297066, 0.0081214569509029388, 0.0061882971785962582, 0.004347573034465313, 0.012583251111209393, 0.0024540796875953674, 0.013337781652808189, 0.0022377993445843458, 0.007952224463224411, 0.0052651981823146343, 0.016051916405558586, 0.0080546187236905098, 0.01011959370225668, 0.0067321709357202053, 0.0073269130662083626, 0.0053565432317554951, 0.0045206630602478981, 0.0062971976585686207, 0.0074148224666714668, 0.0053690057247877121, 0.0067449514754116535, 0.0090309791266918182, 0.0074731227941811085, 0.016696030274033546, 0.0051631946116685867, 0.0018215540330857038, 0.0058446642942726612, 0.010274831205606461, 0.014135982841253281, 0.014254805631935596, 0.0061222119256854057, 0.0085828164592385292, 0.0019745924510061741, 0.008909774012863636, 0.011531494557857513, 0.0039315470494329929, 0.0079641351476311684, 0.0089897941797971725, 0.0065776612609624863, 0.010069635696709156, 0.012012499384582043, 0.012187927030026913, 0.01829538494348526, 0.012873650528490543, 0.0090264491736888885, 0.004767565056681633, 0.0034437144640833139, 0.01269149873405695, 0.0059363087639212608, 0.011496231891214848, 0.0057591316290199757, 0.0082420511171221733, 0.0075281313620507717, 0.003490957897156477, 0.0027935761027038097, 0.01393416803330183, 0.010305145755410194, 0.0094513967633247375, 0.0044867242686450481, 0.0046401666477322578, 0.0054113678634166718, 0.0069417157210409641, 0.011336845345795155, 0.022812161594629288, 0.0022502555511891842, 0.011348633095622063, 0.010677034966647625, 0.0068360837176442146, 0.011299327947199345, 0.0045815762132406235, 0.0068578706122934818, 0.0055149332620203495, 0.0039447848685085773, 0.0057742288336157799, 0.0084541337564587593, 0.0081316446885466576, 0.0045821471139788628, 0.0085679497569799423, 0.0051445132121443748, 0.0062068351544439793, 0.018365157768130302, 0.11392004787921906, 0.0032741355244070292, } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&g0::quant2_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[96] = { 25792, 1838, 12639, -1052, 8223, 8169, 22319, 8958, -1986, 27039, 10406, 2226, 9796, 55698, -751, -3201, 14235, 18488, 2768, -275, -1087, 21438, 6553, 4919, 12393, 7917, 8355, 6213, 89, -31, 9550, 13939, 23605, 2536, 11188, -813, 28640, 10229, 1032, 7365, 1077, 18160, 18034, 6216, 4495, 16743, 19578, 9338, 6885, 5018, 472, -1027, 25245, 9880, 11286, 23142, -423, 10867, 5015, 5742, 18357, 10731, 4198, 9561, 8647, 6502, 9281, -1190, 24563, 11250, 14966, -1862, -2257, 4877, 2603, 4555, 35118, 19946, 18589, -3693, 8639, -8543, -3212, 947, 10246, 7986, 9712, 7781, 17446, 5902, 12238, 5767, 21097, 31585, -14035, 20968, };
const TfArray<96, float> quant14_scale = { 96, { 0.00010043038491858169, 0.00018412728968542069, 0.0001075296095223166, 0.00052465382032096386, 0.0001949790894286707, 0.00011336743045831099, 0.00013997151108924299, 0.00039212367846630514, 0.00023081472318153828, 6.6697204601950943e-05, 0.00013744251918978989, 0.00036927300971001387, 0.00028128112899139524, 8.6599044152535498e-05, 0.00014555371308233589, 0.00021654176816809922, 0.00015598538448102772, 0.00012653920566663146, 0.00016231204790528864, 0.00041618640534579754, 0.00025149201974272728, 0.00011537140380823985, 0.00023051274183671921, 0.00016042035713326186, 0.00014265884237829596, 0.00026322843041270971, 0.00017137880786322057, 0.00014393664605449885, 0.0004185108991805464, 0.00027826376026496291, 0.00015045182954054326, 0.00013511280121747404, 8.3450984675437212e-05, 0.00042721442878246307, 0.00014959476538933814, 0.00034381609293632209, 7.9041012213565409e-05, 0.00025776313850656152, 0.00044241501018404961, 0.00012982121552340686, 0.00045662393677048385, 0.00010399568418506533, 0.00011827330308733508, 0.00012009732017759234, 0.00024972608662210405, 0.00019514045561663806, 0.00014529720647260547, 0.00015614290896337479, 0.0002311862917849794, 0.00017671457317192107, 0.00028614263283088803, 0.00063575099920853972, 0.00010603462578728795, 0.00016094792226795107, 0.00020665221381932497, 7.9932709923014045e-05, 0.00026694851112551987, 0.00015992137196008116, 0.0001562909601489082, 0.000282588618574664, 9.2321031843312085e-05, 0.00013017554010730237, 0.0002511063648853451, 0.00028955368907190859, 0.00012214842718094587, 0.00017261496395803988, 0.00020965191652067006, 0.0002863166737370193, 0.00010952312732115388, 0.00010269614722346887, 0.000133402572828345, 0.00025418525910936296, 0.00016934607992880046, 0.00026845320826396346, 0.0001639859692659229, 0.00028035056311637163, 6.7366752773523331e-05, 0.00022551984875462949, 8.9873501565307379e-05, 0.00033026048913598061, 0.00012622331269085407, 0.00024332152679562569, 0.00012005332246189937, 0.00027687352849170566, 0.00015562308544758707, 0.00019648880697786808, 0.00016736652469262481, 0.00017762454808689654, 9.6770185336936265e-05, 0.00027080540894530714, 0.00011408881982788444, 0.00029370244010351598, 9.9964869150426239e-05, 8.7250387878157198e-05, 0.00020875483460258693, 0.00015633385919500142, } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[96*1*1*16] = { 
  /* [0][0][][] */ 46,-22,127,108,71,-29,27,-29,121,-18,-57,-74,33,88,-41,-82, 
  /* [1][0][][] */ 34,79,-8,-3,92,-4,11,29,56,75,-34,127,1,-26,97,-94, 
  /* [2][0][][] */ 23,-57,1,-2,-60,34,-50,89,-79,-91,10,80,-9,-127,84,-93, 
  /* [3][0][][] */ 127,125,-4,37,-125,-14,-66,-27,1,-2,110,-70,-58,96,-47,-37, 
  /* [4][0][][] */ 4,-4,20,10,-26,30,-17,43,-65,-37,-4,-3,-5,-127,25,2, 
  /* [5][0][][] */ 127,-49,-25,3,-10,-120,-28,16,-5,10,-126,-6,23,-7,-6,29, 
  /* [6][0][][] */ -127,-72,-12,97,-53,1,-46,29,-121,-76,-72,-33,27,59,-8,102, 
  /* [7][0][][] */ -18,14,-76,48,40,-127,-24,41,11,-30,15,-5,-1,18,-41,15, 
  /* [8][0][][] */ 33,-50,-10,-11,10,28,-59,-63,-12,12,-71,9,-127,0,1,24, 
  /* [9][0][][] */ 25,-54,61,127,3,24,-6,-75,126,-91,1,-21,-6,50,-70,17, 
  /* [10][0][][] */ -127,-73,-9,-50,117,49,47,73,120,-76,-90,33,100,-116,-121,83, 
  /* [11][0][][] */ 41,-15,-127,19,52,24,-21,41,-12,-33,-12,-7,-2,21,-42,4, 
  /* [12][0][][] */ 106,-56,9,3,-5,-62,-61,-26,40,-2,-127,-20,-53,-15,0,59, 
  /* [13][0][][] */ 38,-76,24,-61,100,11,-104,-127,45,-71,21,14,15,-16,26,0, 
  /* [14][0][][] */ -55,29,-93,-48,90,-127,62,-61,61,48,-7,-99,24,119,-19,27, 
  /* [15][0][][] */ 26,-6,61,40,50,-44,-38,-13,20,-61,-67,-8,-127,-52,-14,52, 
  /* [16][0][][] */ -127,64,5,12,-2,93,44,75,-20,28,126,9,-4,8,10,-47, 
  /* [17][0][][] */ -10,-8,-44,-34,-35,11,42,77,-24,127,-21,10,-8,80,64,-1, 
  /* [18][0][][] */ 4,127,-52,1,7,3,60,-68,26,118,-54,112,9,-46,34,-99, 
  /* [19][0][][] */ 7,-17,35,18,6,45,-6,16,13,6,-42,-7,-127,1,-11,27, 
  /* [20][0][][] */ 91,-58,-9,-88,-30,22,30,-86,-57,28,-127,-40,30,1,55,10, 
  /* [21][0][][] */ 50,-9,127,48,-21,54,25,0,0,28,-20,-9,-14,81,2,-10, 
  /* [22][0][][] */ 29,6,18,10,-16,0,27,127,13,1,10,32,4,37,23,20, 
  /* [23][0][][] */ -23,18,-81,13,19,-127,9,36,-1,-24,-12,-6,-61,6,-4,37, 
  /* [24][0][][] */ 40,-63,5,-57,58,-2,-27,-10,34,30,60,95,-45,84,127,36, 
  /* [25][0][][] */ -127,-94,-45,5,13,5,11,-35,-59,3,-80,15,21,38,28,54, 
  /* [26][0][][] */ 9,0,47,-3,-9,12,-35,62,-79,-61,-6,14,6,-127,39,-16, 
  /* [27][0][][] */ -97,41,-46,31,34,-25,2,27,36,-31,127,26,-21,6,-13,-26, 
  /* [28][0][][] */ -17,-8,21,34,-1,3,12,83,27,14,-23,-5,-127,-9,-13,37, 
  /* [29][0][][] */ -11,63,40,-37,37,-16,22,-24,-127,32,-30,4,1,33,-87,11, 
  /* [30][0][][] */ -10,-7,-127,-34,23,-63,-1,18,-18,-14,-6,-21,-36,-23,10,19, 
  /* [31][0][][] */ 127,-34,-120,10,40,4,-47,60,-17,-7,-77,-47,11,-9,-84,28, 
  /* [32][0][][] */ -122,50,30,45,18,97,22,35,23,-2,127,7,-32,22,-17,-27, 
  /* [33][0][][] */ 8,-15,127,-20,-64,24,6,-37,-5,9,-7,21,-6,21,37,19, 
  /* [34][0][][] */ -17,-22,-48,-118,25,9,6,-29,-29,-58,-33,-127,-16,0,48,10, 
  /* [35][0][][] */ 1,-35,39,48,53,-20,19,-18,-116,39,-10,26,-21,127,-43,-40, 
  /* [36][0][][] */ -121,54,-34,-2,-15,48,52,95,-5,35,127,-11,6,17,14,-28, 
  /* [37][0][][] */ -36,11,127,-31,-75,-64,24,-36,18,20,-4,6,-1,-64,65,12, 
  /* [38][0][][] */ 13,-14,-12,26,35,-51,-57,9,-17,-17,69,-10,127,27,-14,8, 
  /* [39][0][][] */ -26,-18,-9,-47,-58,-91,68,127,-40,-11,4,-50,2,54,62,67, 
  /* [40][0][][] */ 68,-6,-16,-12,-7,84,-16,8,15,-4,15,0,127,12,-27,-21, 
  /* [41][0][][] */ -7,-8,-34,-127,28,-5,-27,-73,-8,-49,11,-37,-8,-19,-18,31, 
  /* [42][0][][] */ 48,53,5,105,-117,-5,-98,2,-80,-62,79,-87,-44,127,-45,12, 
  /* [43][0][][] */ 17,114,-28,127,21,23,41,-72,-42,81,-6,26,5,-44,45,36, 
  /* [44][0][][] */ -8,-27,-127,23,54,79,-46,54,-14,-22,37,-22,7,-27,-55,1, 
  /* [45][0][][] */ 3,18,-10,-127,-21,-1,51,-8,-11,24,-31,13,5,-91,33,-32, 
  /* [46][0][][] */ 12,28,58,-19,13,12,-48,52,18,-47,-27,13,9,127,50,-16, 
  /* [47][0][][] */ 16,-20,22,-40,-37,17,-64,54,-12,-33,17,32,8,-127,40,13, 
  /* [48][0][][] */ 6,-11,9,-127,-8,-17,-7,7,13,-30,14,-15,6,46,-7,57, 
  /* [49][0][][] */ 33,-36,-2,120,95,14,4,51,-58,17,40,43,-14,41,127,-12, 
  /* [50][0][][] */ -23,-14,73,-24,4,127,-29,-63,40,-27,118,32,98,-5,-5,-61, 
  /* [51][0][][] */ 29,48,13,11,19,4,-43,20,44,1,-2,127,13,31,30,-55, 
  /* [52][0][][] */ -26,60,127,7,19,-33,13,-52,-29,9,12,38,-5,94,-122,-18, 
  /* [53][0][][] */ -6,-18,-45,-127,-47,8,21,-35,-19,43,11,-2,19,-25,49,11, 
  /* [54][0][][] */ 8,12,-28,-51,21,9,-14,10,61,-25,5,-30,-11,127,21,32, 
  /* [55][0][][] */ -8,-32,-42,-11,11,-52,-18,-127,9,-98,-12,-6,-30,-75,-44,-13, 
  /* [56][0][][] */ 40,44,30,60,5,-21,16,127,23,-24,4,-34,78,-12,-49,35, 
  /* [57][0][][] */ 78,-24,127,-27,-66,-52,-2,-33,20,6,-105,28,59,-45,56,23, 
  /* [58][0][][] */ 108,100,15,116,-127,-20,-5,47,-10,23,94,-29,-77,-59,-25,-87, 
  /* [59][0][][] */ 127,-41,-6,0,-24,-15,-7,8,-28,22,-124,-13,15,-5,3,27, 
  /* [60][0][][] */ -127,34,-6,-3,13,14,19,31,9,8,96,0,-36,0,17,-15, 
  /* [61][0][][] */ -108,66,25,27,32,1,-75,-60,127,-97,81,-3,55,-43,-105,-61, 
  /* [62][0][][] */ -21,-41,-127,58,68,103,-4,100,24,-58,40,-14,-78,-3,-105,-11, 
  /* [63][0][][] */ -44,12,127,-40,-58,-57,31,-33,5,17,2,11,-12,-51,74,15, 
  /* [64][0][][] */ 28,65,-11,27,62,-6,91,-127,-18,111,5,-21,-18,-114,-4,50, 
  /* [65][0][][] */ 5,23,7,-22,65,10,1,-127,-24,-57,-28,-49,-8,-39,38,19, 
  /* [66][0][][] */ -127,2,-18,8,-44,19,12,-40,-77,-36,-79,50,57,21,48,80, 
  /* [67][0][][] */ -6,-45,1,127,3,-6,-24,35,60,27,6,-17,-6,-36,-87,-19, 
  /* [68][0][][] */ 10,3,-10,127,-53,-17,0,-30,-47,28,14,-25,-25,-63,-28,-48, 
  /* [69][0][][] */ 86,93,16,117,47,-16,62,-127,14,105,17,55,5,-40,29,-15, 
  /* [70][0][][] */ 14,-40,-1,-100,127,-42,46,15,84,-31,71,-59,8,108,77,123, 
  /* [71][0][][] */ 12,46,10,85,46,-127,-40,95,39,-93,16,14,12,-53,-61,34, 
  /* [72][0][][] */ -127,-73,-17,50,16,37,-28,18,-49,-30,-92,38,52,18,3,96, 
  /* [73][0][][] */ -18,-18,-11,60,18,-19,-2,-16,73,11,-3,8,21,127,-57,-42, 
  /* [74][0][][] */ 76,-45,19,-30,-44,-19,39,-16,-43,-9,-119,26,-127,-12,33,50, 
  /* [75][0][][] */ -16,-16,-24,127,-34,9,0,-21,-70,22,-15,-27,0,-51,-17,-34, 
  /* [76][0][][] */ 0,-11,-4,45,36,12,-22,-127,16,-125,6,23,-26,-20,32,-41, 
  /* [77][0][][] */ 127,-33,33,50,-39,-3,-41,-6,43,-9,-41,51,37,13,-51,35, 
  /* [78][0][][] */ -15,-4,49,-3,11,-12,-63,33,45,-29,-40,-34,16,127,33,-29, 
  /* [79][0][][] */ -4,19,47,18,43,60,-50,-53,13,-47,73,-16,127,-23,-29,-42, 
  /* [80][0][][] */ -123,-90,-81,127,9,38,33,-14,-82,33,-100,15,54,-86,-13,48, 
  /* [81][0][][] */ 62,7,-70,38,127,93,-40,-39,-7,-110,-20,-82,-31,-11,-101,25, 
  /* [82][0][][] */ 122,122,-4,38,-127,-20,-75,-23,-71,-2,115,-59,-55,98,-2,-39, 
  /* [83][0][][] */ 127,42,14,-23,8,-13,-10,28,37,16,84,-33,-53,-28,-26,-80, 
  /* [84][0][][] */ 3,-54,-57,-28,43,24,-5,-127,-24,-54,27,12,-25,-5,0,-13, 
  /* [85][0][][] */ -26,-4,-43,-51,-5,-6,74,87,-13,127,-7,-44,29,63,64,-24, 
  /* [86][0][][] */ 102,-26,8,0,0,-31,-4,-22,0,2,-127,6,17,19,-12,23, 
  /* [87][0][][] */ -25,36,15,-37,-10,74,-29,54,-6,-32,31,10,10,-127,13,5, 
  /* [88][0][][] */ 1,-22,-97,-46,61,-10,-35,-127,5,-32,-10,-28,-39,-5,26,-21, 
  /* [89][0][][] */ 26,-20,28,-127,35,6,-53,112,81,-77,32,12,-9,41,30,46, 
  /* [90][0][][] */ -9,15,-41,56,71,-4,105,-92,69,127,-40,41,20,-1,-14,-20, 
  /* [91][0][][] */ 43,-16,-42,-11,-1,-127,-13,-5,-6,-4,-47,-6,30,-12,9,25, 
  /* [92][0][][] */ 20,4,127,61,42,17,0,44,-32,27,-65,29,25,88,-1,-8, 
  /* [93][0][][] */ 127,-38,-41,-14,-31,-57,11,40,-27,42,-124,-7,1,16,-1,49, 
  /* [94][0][][] */ 16,-19,44,77,111,-32,-10,57,7,-15,-2,55,-6,127,-23,-77, 
  /* [95][0][][] */ -117,42,40,40,19,43,21,4,11,5,127,-4,-21,33,-16,-30, 
};
const TfArray<96, float> quant15_scale = { 96, { 0.00047287641791626811, 0.00086696323705837131, 0.00050630309851840138, 0.0024703321978449821, 0.00091805896954610944, 0.0005337905022315681, 0.00065905577503144741, 0.001846314175054431, 0.0010867910459637642, 0.00031404374749399722, 0.00064714805921539664, 0.0017387217376381159, 0.0013244120636954904, 0.00040775156230665743, 0.00068533956073224545, 0.0010195868089795113, 0.00073445710586383939, 0.00059580977540463209, 0.00076424621511250734, 0.001959613524377346, 0.0011841499945148826, 0.00054322619689628482, 0.00108536914922297, 0.00075533916242420673, 0.00067170907277613878, 0.0012394109508022666, 0.00080693705240264535, 0.00067772564943879843, 0.0019705584272742271, 0.0013102047378197312, 0.00070840236730873585, 0.00063617853447794914, 0.00039292892324738204, 0.0020115389488637447, 0.00070436688838526607, 0.0016188578447327018, 0.00037216456257738173, 0.0012136775767430663, 0.0020831108558923006, 0.00061126315267756581, 0.0021500135771930218, 0.00048966362373903394, 0.00055688980501145124, 0.00056547817075625062, 0.0011758351465687156, 0.00091881875414401293, 0.00068413180997595191, 0.00073519878787919879, 0.0010885405354201794, 0.00083206046838313341, 0.0013473024591803551, 0.0029934332706034184, 0.00049926398787647486, 0.00075782323256134987, 0.0009730218444019556, 0.00037636311026290059, 0.001256926916539669, 0.00075298966839909554, 0.00073589594103395939, 0.0013305683387443423, 0.0004346935311332345, 0.00061293150065466762, 0.0011823342647403479, 0.0013633634662255645, 0.00057513581123203039, 0.00081275746924802661, 0.00098714593332260847, 0.0013481219066306949, 0.00051568960770964622, 0.00048354474711231887, 0.00062812597025185823, 0.0011968311155214906, 0.00079736590851098299, 0.0012640118366107345, 0.0007721278234384954, 0.00132003054022789, 0.00031719633261673152, 0.001061860122717917, 0.00042316934559494257, 0.0015550313983112574, 0.00059432239504531026, 0.0011456792708486319, 0.00056527100969105959, 0.0013036588206887245, 0.0007327512139454484, 0.00092516746371984482, 0.00078804517397657037, 0.00083634507609531283, 0.00045564238098450005, 0.0012750871246680617, 0.00053718715207651258, 0.0013828978408128023, 0.00047068455023691058, 0.0004108184075448662, 0.0009829220362007618, 0.00073609792161732912, } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&g0::quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[16] = { -37878, 3627, 2444, -7987, 730, -6552, -11180, -42366, 3805, 24126, 32607, -9543, -2233, -22087, 39929, -44759, };
const TfArray<16, float> quant16_scale = { 16, { 0.00074144051177427173, 0.00085913512157276273, 0.0011342164361849427, 0.0010289738420397043, 0.00093652482610195875, 0.0010348535142838955, 0.0011845577973872423, 0.00060204189503565431, 0.00056629220489412546, 0.00062772043747827411, 0.00090275198454037309, 0.00062282325234264135, 0.00094584492035210133, 0.0012992607662454247, 0.00060514832148328424, 0.00064192496938630939, } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[16*1*1*48] = { 
  /* [0][0][][] */ -16,-3,-23,9,24,-2,2,105,-51,16,42,-6,17,-16,-13,14,15,-13,-8,-4,64,-7,21,127,-16,87,-5,-14,26,-16,25,-25,-17,52,20,-48,16,48,18,-12,-108,-26,20,43,36,27,-125,-50, 
  /* [1][0][][] */ -37,-12,21,14,-33,11,1,56,-55,-34,6,-44,-22,-18,0,-3,-25,119,-10,18,8,8,-28,-16,25,-43,17,24,-26,-86,-38,21,-21,-5,32,-2,-4,-41,2,17,-19,-31,127,12,10,-1,23,-12, 
  /* [2][0][][] */ -21,-7,-13,-36,-2,-65,5,-21,1,13,16,26,15,15,-13,8,-4,-20,-25,-13,-4,-1,-1,-127,-13,74,-15,4,-1,-20,-3,-6,-7,54,11,-1,22,11,26,1,-40,3,-19,-6,-1,-10,15,8, 
  /* [3][0][][] */ -7,32,2,-30,-1,0,2,-4,-19,-3,0,38,-127,6,-5,-2,1,5,-18,-2,-30,8,6,16,-7,-11,3,24,-9,18,4,17,4,1,17,19,-10,26,41,4,10,6,23,-29,8,-5,4,19, 
  /* [4][0][][] */ 36,-32,9,11,20,28,23,-24,-30,3,-12,-19,1,12,1,16,21,-8,-79,3,-5,11,14,72,1,-27,6,48,9,-74,19,7,13,-35,32,-127,12,36,-2,18,-19,18,8,-23,-11,-20,9,6, 
  /* [5][0][][] */ 30,1,-20,58,0,-7,7,24,2,-4,40,8,3,52,2,1,-24,21,28,3,10,4,2,-25,1,-51,2,-20,-4,-9,3,7,66,-127,3,30,-14,-12,14,4,-91,56,20,-4,-5,-2,-100,-8, 
  /* [6][0][][] */ 24,-3,5,6,-13,-5,3,-13,-3,6,-1,6,-17,7,4,5,0,-11,127,8,6,9,16,-34,5,3,25,-12,-12,-4,-4,7,0,-11,30,-37,0,-44,70,13,1,-7,-7,6,-10,2,7,-12, 
  /* [7][0][][] */ -45,-14,-10,35,-9,78,-5,45,0,29,-6,127,76,-4,-8,-4,-6,-24,-7,-18,-29,-6,-19,67,0,-37,-51,-30,-11,-13,-13,-11,4,0,-22,4,8,-58,96,-3,23,28,-62,-59,16,-9,4,3, 
  /* [8][0][][] */ -48,-49,-1,4,-5,2,-1,32,-3,-69,3,41,50,6,8,6,-13,61,-31,5,-50,22,-6,-12,0,1,4,44,-9,116,-11,20,-4,3,-19,-127,-114,69,33,27,20,-4,109,-23,9,29,20,32, 
  /* [9][0][][] */ -24,5,-5,31,19,-33,-4,-2,59,-41,9,57,-56,5,14,1,-7,18,-36,-22,51,8,-13,-16,3,10,48,-25,10,11,11,-2,-4,19,75,-103,-9,-127,-94,7,-29,26,56,9,4,9,-16,-42, 
  /* [10][0][][] */ -22,-8,-34,-127,43,89,9,-12,-2,34,24,9,48,-48,-32,21,34,-43,53,-33,31,-24,38,51,-48,-108,7,-32,48,33,44,-45,-28,-82,25,-6,17,-42,7,-34,-35,-63,-13,11,14,14,17,-35, 
  /* [11][0][][] */ -1,52,-6,63,36,-66,-81,-17,2,61,-16,2,-9,54,-3,-79,19,43,5,-8,-55,-106,12,2,12,-40,18,-19,54,-37,23,-85,47,-19,-37,-92,91,22,8,-127,-3,65,97,-73,-9,-55,32,31, 
  /* [12][0][][] */ 127,-3,-15,15,2,19,4,100,21,-12,-58,-23,0,14,-10,-3,-9,7,-3,-4,5,2,3,20,-1,15,-3,5,-4,14,-4,3,3,-65,-9,11,-18,-16,-30,1,-15,-79,6,-125,-55,-11,80,-5, 
  /* [13][0][][] */ 10,3,0,6,7,-10,2,1,0,6,4,22,-5,3,5,0,6,1,10,3,12,-11,8,-3,2,1,17,127,11,-4,7,-3,4,0,-38,20,9,-5,6,-15,-13,-3,1,5,-1,-2,-8,-13, 
  /* [14][0][][] */ 63,-22,47,-70,51,28,40,-99,-56,-56,-5,123,-71,-5,64,14,54,26,-54,69,20,15,74,-16,24,58,-33,-118,29,-36,61,48,-6,72,-127,-50,-40,44,89,9,-36,8,56,1,0,1,14,-29, 
  /* [15][0][][] */ -7,-51,-75,-37,57,28,77,-51,-10,22,-18,-35,83,22,-102,65,61,52,80,-85,-103,-25,57,-15,-95,45,29,57,56,52,48,-48,23,61,98,127,-19,-112,-9,-35,95,61,117,-53,-4,-33,-17,66, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant17_scale = { 16, { 0.031511221081018448, 0.036513242870569229, 0.048204198479652405, 0.043731387704610825, 0.039802305400371552, 0.043981272727251053, 0.050343703478574753, 0.025586780160665512, 0.024067418649792671, 0.026678116992115974, 0.038366958498954773, 0.026469986885786057, 0.04019840806722641, 0.055218581110239029, 0.025718802586197853, 0.027281811460852623, } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 2480, 37693, -1210, 39020, 4482, 126858, -2198, 48255, 2955, 33301, 24079, 1450, 1039, 29157, -610, -1711, -456, -177, 658, -2278, 109, -2465, -623, -19497, -4507, 41659, 121844, 106929, 3264, 5679, -1840, 439, 23313, 428, 37500, 442, 57305, 1277, 46637, 2322, 1442, 58686, -180, 2637, 50735, -438, 1925, 48884, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 7.8889475844334811e-05, 3.6051482311449945e-05, 0.00017121872224379331, 5.6624834542162716e-05, 0.00014056712097954005, 6.6709653765428811e-05, 0.00015690129657741636, 0.00012139955651946366, 8.0798155977390707e-05, 4.0620489016873762e-05, 4.9931939429370686e-05, 9.8975258879363537e-05, 4.2439100070623681e-05, 3.8218870031414554e-05, 0.00015964711201377213, 0.00019569844880606979, 0.00017504020070191473, 7.8054559708107263e-05, 0.00013275511446408927, 0.00013924689847044647, 8.8694818259682506e-05, 0.00018580173491500318, 0.00010602323163766414, 0.00012716074706986547, 0.00010113322787219658, 0.00010686963651096448, 2.2002022888045758e-05, 6.3655374106019735e-05, 0.00011849977454403415, 9.3397640739567578e-05, 0.000110873173980508, 0.0001410605909768492, 5.1531082135625184e-05, 0.00013711040082853287, 2.8658138035098091e-05, 5.5058542784536257e-05, 0.00010171679605264217, 9.3733018729835749e-05, 0.00012659250933211297, 8.4393985162023455e-05, 0.00010447709064465016, 9.9605589639395475e-05, 8.7720880401320755e-05, 9.090775711229071e-05, 3.154970909235999e-05, 0.00016503753431607038, 0.00010339150321669877, 3.1792227673577145e-05, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[1*3*3*48] = { 
  /* [0][0][][] */ 69,-92,97,70,53,-34,106,-64,59,-88,-80,47,51,-42,-72,-90,101,78,49,78,66,-74,-83,50,-32,-40,-64,-64,-67,61,-63,-114,-13,41,68,64,-65,53,-50,-22,50,-74,57,62,-94,11,75,-33, 82,-96,127,85,-77,-68,-57,-84,96,-102,-63,74,79,-109,-96,91,-38,96,82,127,85,-116,52,71,-52,-77,-69,-80,56,79,-30,-127,-86,79,81,83,-82,82,-82,-16,76,-94,83,89,-73,-127,93,-103, 34,-46,70,37,18,-41,-47,-39,42,-31,5,34,29,-78,-55,-2,-54,37,34,70,33,-55,31,26,-28,-45,-44,-22,31,30,88,-89,-84,43,35,34,-29,39,-37,-10,40,-40,34,42,-6,-9,36,-73, 
  /* [0][1][][] */ 92,-112,-41,93,55,-82,127,-89,87,-113,-72,82,83,-110,-13,-127,127,107,74,-38,84,108,-127,73,73,-75,-93,-98,-127,86,-69,-9,-88,70,106,96,-85,79,-80,89,84,-101,87,90,-89,107,94,-91, 127,-127,-65,127,-127,-127,-91,-127,127,-127,-127,127,127,-127,-22,96,-66,127,127,-51,127,127,69,127,127,-127,-127,-127,53,127,-28,16,-127,127,127,127,-127,127,-127,127,127,-127,127,127,-127,-11,127,-127, 63,-78,-33,66,37,-62,-49,-62,56,-42,-60,58,48,-53,-16,10,-63,50,58,-30,57,64,50,64,66,-64,-61,-44,36,54,127,15,-62,69,48,49,-49,60,-59,56,60,-58,54,62,-62,-67,58,-57, 
  /* [0][2][][] */ 45,-50,-46,50,26,-53,64,-42,41,-72,-4,39,55,-72,83,-79,73,50,34,-30,26,-11,-77,30,-24,-44,-48,-48,-74,31,-41,90,-73,36,48,42,-26,37,-42,-87,47,-50,40,44,-23,16,40,-74, 72,-74,-48,80,-57,-64,-72,-67,51,-77,-66,60,74,-48,127,32,-47,59,61,-43,54,-18,41,66,-49,-66,-77,-61,31,61,-24,117,-55,64,57,57,-49,61,-66,-105,68,-67,60,62,-86,49,63,-52, 41,-40,-27,46,28,-20,-17,-34,14,-26,-52,28,31,5,67,24,-36,22,28,-32,28,-1,39,41,-24,-28,-48,-24,33,33,61,67,1,33,15,22,-22,30,-29,-55,28,-32,25,29,-63,9,31,-4, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant19_scale = { 48, { 0.003352802712470293, 0.0015321880346164107, 0.0072767958045005798, 0.0024065554607659578, 0.0059741022996604443, 0.0028351601213216782, 0.0066683050245046616, 0.0051594809629023075, 0.0034339216072112322, 0.0017263707704842091, 0.0021221074275672436, 0.0042064483277499676, 0.0018036616966128349, 0.0016243018908426166, 0.0067850020714104176, 0.0083171837031841278, 0.0074392086826264858, 0.0033173186238855124, 0.0056420923210680485, 0.0059179933741688728, 0.0037695297505706549, 0.0078965732827782631, 0.0045059872791171074, 0.0054043317213654518, 0.0042981621809303761, 0.0045419596135616302, 0.00093508593272417784, 0.0027053533121943474, 0.0050362404435873032, 0.0039693997241556644, 0.0047121099196374416, 0.0059950747527182102, 0.0021900709252804518, 0.0058271917514503002, 0.0012179708573967218, 0.0023399880155920982, 0.0043229637667536736, 0.003983653150498867, 0.0053801815956830978, 0.0035867441911250353, 0.0044402764178812504, 0.0042332373559474945, 0.0037281373515725136, 0.0038635795935988426, 0.0013408625964075327, 0.007014094851911068, 0.0043941386975347996, 0.001351169659756124, } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&g0::quant18_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[48] = { 853, 1153, 2780, 715, 12630, 21147, 3259, -57, -1083, -745, 1472, 1351, 4322, 1503, 34260, 4010, 2525, -1454, -339, 4381, -2427, 14867, 13512, 13218, 7568, 419, 5978, 6609, 11545, -709, 12701, 7912, 728, -219, 6233, 4741, -2514, 403, -958, 7156, 1375, -792, -1225, 42, 1450, 4994, 991, 1376, };
const TfArray<48, float> quant20_scale = { 48, { 0.00027146167121827602, 0.00060923350974917412, 0.00020198656420689076, 0.00021175731671974063, 0.00017331300477962941, 0.00019125157268717885, 0.00034061659243889153, 0.00017082954582292587, 0.00027158402372151613, 0.00058284739498049021, 0.00068675290094688535, 0.00021804984135087579, 0.00029115134384483099, 0.00050496513722464442, 0.00010497446055524051, 0.00031367765041068196, 0.00019921547209378332, 0.00027426125598140061, 0.0001732672390062362, 0.00020963496353942901, 0.0002494978834874928, 0.00017281890904996544, 0.00027324090478941798, 0.00011802235530922189, 0.00021093187388032675, 0.00021701902733184397, 0.001162791857495904, 0.00028333335649222136, 0.00015068177890498191, 0.00032244878821074963, 0.00020536521333269775, 0.0001528124266769737, 0.00053456495516002178, 0.00018936752167064697, 0.00059503148077055812, 0.00038401575875468552, 0.00055223412346094847, 0.00024740261142142117, 0.00017337891040369868, 0.0002599247673060745, 0.00012514875561464578, 0.00017842384113464504, 0.0002381164813414216, 0.00019348715431988239, 0.0013347931671887636, 0.00027687687543220818, 0.00023453532776329666, 0.0008485324215143919, } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&g0::quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[48*1*1*8] = { 
  /* [0][0][][] */ -127,0,-2,74,-36,41,25,-30, 
  /* [1][0][][] */ 29,73,47,21,16,-42,104,127, 
  /* [2][0][][] */ -40,-1,2,-1,-127,-13,12,3, 
  /* [3][0][][] */ 100,-3,-13,-123,-127,17,35,-18, 
  /* [4][0][][] */ -127,45,-16,-10,71,-13,45,21, 
  /* [5][0][][] */ -102,-27,21,-9,-127,8,9,85, 
  /* [6][0][][] */ -16,-127,25,-17,13,3,-3,33, 
  /* [7][0][][] */ -66,-4,3,102,127,-33,-35,6, 
  /* [8][0][][] */ 74,4,2,-127,0,-23,-45,-34, 
  /* [9][0][][] */ -5,-127,-8,-5,3,86,-52,86, 
  /* [10][0][][] */ -94,-5,-1,22,-127,71,63,-16, 
  /* [11][0][][] */ 115,10,40,13,-59,-44,-33,-127, 
  /* [12][0][][] */ 0,14,42,-7,10,-78,127,63, 
  /* [13][0][][] */ 66,-27,-7,-14,125,127,119,-43, 
  /* [14][0][][] */ 127,57,-13,19,-101,-19,-27,-19, 
  /* [15][0][][] */ -15,-127,16,-13,4,4,5,36, 
  /* [16][0][][] */ -52,-15,4,-1,-127,0,14,4, 
  /* [17][0][][] */ -26,103,-115,3,12,-127,108,-87, 
  /* [18][0][][] */ 127,-28,-43,14,-60,26,11,102, 
  /* [19][0][][] */ 127,-50,-21,-6,47,0,32,7, 
  /* [20][0][][] */ 127,24,-17,121,-2,35,2,-57, 
  /* [21][0][][] */ 8,32,-61,5,-23,90,-127,-86, 
  /* [22][0][][] */ -127,22,30,-5,-33,1,-52,-25, 
  /* [23][0][][] */ -40,-58,2,22,-127,63,76,-16, 
  /* [24][0][][] */ 127,-8,-10,-6,-88,-9,1,9, 
  /* [25][0][][] */ 23,-14,1,-24,127,52,51,-33, 
  /* [26][0][][] */ 0,-99,5,-38,5,-127,80,-51, 
  /* [27][0][][] */ -17,-127,25,-14,-3,-56,32,-8, 
  /* [28][0][][] */ -99,36,-27,15,-15,-28,127,97, 
  /* [29][0][][] */ -13,43,15,5,0,41,-103,-127, 
  /* [30][0][][] */ 127,-31,-2,8,-81,3,-45,-22, 
  /* [31][0][][] */ -10,-27,64,-16,18,-114,127,68, 
  /* [32][0][][] */ -74,24,8,6,-127,-98,-98,48, 
  /* [33][0][][] */ -27,13,0,23,-127,-58,-47,21, 
  /* [34][0][][] */ 10,-127,50,-7,-6,89,-74,62, 
  /* [35][0][][] */ -23,-49,-127,-9,-3,-68,44,-54, 
  /* [36][0][][] */ 4,127,59,9,-10,11,-20,-37, 
  /* [37][0][][] */ -127,32,36,-17,56,-31,-9,-106, 
  /* [38][0][][] */ -127,-15,-48,-12,40,23,34,110, 
  /* [39][0][][] */ -1,-36,71,-4,16,-85,127,95, 
  /* [40][0][][] */ -32,-17,-11,-37,-127,111,117,-31, 
  /* [41][0][][] */ -127,47,9,-73,-93,-95,-95,50, 
  /* [42][0][][] */ -41,-127,-100,-4,-9,68,-122,-85, 
  /* [43][0][][] */ -69,7,-15,-127,100,62,66,2, 
  /* [44][0][][] */ 127,-11,15,-93,30,-32,-14,42, 
  /* [45][0][][] */ -20,-127,-10,-13,-8,-69,77,8, 
  /* [46][0][][] */ 111,-6,-5,-24,127,-37,-30,4, 
  /* [47][0][][] */ 127,-2,-3,110,-7,24,13,-44, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant21_scale = { 48, { 0.00068919564364477992, 0.001546741696074605, 0.00051281001651659608, 0.00053761631716042757, 0.00044001266360282898, 0.00048555567627772689, 0.0008647684589959681, 0.00043370758066885173, 0.0006895062979310751, 0.0014797517796978354, 0.0017435504123568535, 0.00055359199177473783, 0.00073918444104492664, 0.0012820218689739704, 0.00026651256484910846, 0.00079637498129159212, 0.00050577468937262893, 0.00069630338111892343, 0.0004398964811116457, 0.00053222803398966789, 0.00063343328656628728, 0.00043875823030248284, 0.00069371284916996956, 0.00029963898123241961, 0.00053552066674456, 0.00055097491713240743, 0.0029521335382014513, 0.00071933591971173882, 0.00038255576509982347, 0.00081864342791959643, 0.00052138784667477012, 0.00038796511944383383, 0.0013571707531809807, 0.00048077237443067133, 0.0015106851933524013, 0.0009749516611918807, 0.0014020298840478063, 0.00062811374664306641, 0.00044017998152412474, 0.00065990543225780129, 0.0003177317266818136, 0.00045298822806216776, 0.00060453783953562379, 0.00049123144708573818, 0.003388816025108099, 0.00070294400211423635, 0.00059544586110860109, 0.0021542815957218409, } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&g0::quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[8] = { -40824, 25483, -12530, -12670, 19622, -4782, 33001, 43394, };
const TfArray<1, int> tensor_dimension22 = { 1, { 8 } };
const TfArray<8, float> quant22_scale = { 8, { 0.00043578800978139043, 0.00080389680806547403, 0.001556639326736331, 0.0015916009433567524, 0.00079743808601051569, 0.00064332719193771482, 0.00077571335714310408, 0.0010646911105141044, } };
const TfArray<8, int> quant22_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[8*1*1*48] = { 
  /* [0][0][][] */ -53,-12,-36,16,6,-25,0,2,-116,127,-39,115,117,7,72,-19,-7,-33,7,4,-8,-6,-22,-35,23,-95,10,65,-12,10,19,-38,-3,-78,108,20,-3,-6,-6,-18,116,-4,47,-24,-31,25,-17,-18, 
  /* [1][0][][] */ -1,33,127,5,-5,-24,1,-83,29,-1,22,6,-20,7,-6,-118,10,-55,9,5,-26,32,24,-34,-18,-8,14,1,12,-5,13,-1,-5,12,16,12,-12,-33,65,-57,11,36,-11,26,-15,8,25,-1, 
  /* [2][0][][] */ 5,-49,17,-43,33,27,-6,-29,6,-1,-2,14,-10,58,6,-1,-38,127,-25,-34,-15,22,-38,-10,122,2,0,-7,-29,-9,2,-41,-8,-14,1,10,-10,-2,-14,7,16,-20,-19,0,2,26,-25,-40, 
  /* [3][0][][] */ 1,-87,-2,8,3,-6,-10,-2,-7,-12,17,21,13,-9,49,2,-9,-21,3,23,-6,20,-23,3,6,52,1,7,-7,5,127,1,12,7,-3,-1,-21,-14,-7,12,-9,6,-9,27,-7,1,-1,34, 
  /* [4][0][][] */ -98,7,0,2,0,-38,1,7,40,-37,20,-18,-32,1,-12,-9,2,7,1,25,9,-28,14,3,-6,45,6,109,2,1,-7,-31,0,-127,-31,11,3,-6,2,1,-50,-5,-11,17,-57,3,6,6, 
  /* [5][0][][] */ -24,26,22,7,-47,11,-3,47,21,4,14,7,-5,-45,7,35,-2,-82,20,2,41,-41,7,39,10,6,-79,-42,-40,-34,20,-1,-4,-66,-1,-64,65,15,-43,13,25,-45,3,6,127,-11,-42,-3, 
  /* [6][0][][] */ -28,-25,-16,-7,37,-28,0,-26,-9,-6,32,-20,-11,40,-1,-58,-2,1,0,-25,-35,48,-6,-78,2,-10,-54,-65,24,45,-16,2,4,-59,-17,64,-67,-51,9,-56,-13,11,17,40,127,-31,41,13, 
  /* [7][0][][] */ 12,32,-73,25,-22,13,4,56,-7,-3,61,-32,9,-31,-8,-4,-18,-127,38,-41,57,38,15,-56,18,-21,21,3,-20,29,-13,4,2,35,-3,-23,-10,-53,-41,-65,-15,-27,39,60,-30,-20,-4,0, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant23_scale = { 8, { 0.018520990386605263, 0.034165613353252411, 0.06615716964006424, 0.067643038928508759, 0.033891119062900543, 0.027341404929757118, 0.032967817038297653, 0.045249372720718384, } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { -52330, -111, 8381, 75, 5790, -5503, 1996, 24853, 1595, 37508, -2241, 27761, -6724, -864, 27658, 8576, 490, 17509, 35026, 11542, -52, -340, 293, 14684, -8251, 29431, 45847, 35580, 3606, 1110, -1369, 1286, 1231, 17646, -6973, 17477, -11222, 16030, -22463, 124451, 25729, 18766, 12473, -1713, 15501, 3275, 1477, 122, };
const TfArray<48, float> quant24_scale = { 48, { 0.00031784092425368726, 0.00026094954228028655, 0.00018885532335843891, 0.00021057877165731043, 0.00011840806837426499, 9.7319134511053562e-05, 0.00059828581288456917, 0.00014019676018506289, 0.00011507652379805222, 0.00013145094271749258, 7.8990626207087189e-05, 0.00015599456673953682, 0.00024324173864442855, 0.00022842499311082065, 9.0554094640538096e-05, 0.00019205499847885221, 0.00020904243865516037, 0.00022440965403802693, 6.632696749875322e-05, 0.0001596634101588279, 0.00019117092597298324, 0.00019400109886191785, 0.00014838499191682786, 0.0001405571965733543, 0.00018416435341350734, 0.00012307116412557662, 0.00061782199190929532, 9.5397765107918531e-05, 0.00017915054922923446, 0.00076887581963092089, 0.00010517484042793512, 0.00017583905719220638, 0.00071600015508010983, 0.00016453952412120998, 0.00017328407557215542, 0.00014279049355536699, 0.00033079431159421802, 0.00015364619321189821, 0.00026589940534904599, 2.0605451936717145e-05, 0.000125834223581478, 5.1895716751459986e-05, 0.00012989528477191925, 0.00013296419638209045, 0.00015389680629596114, 0.0001012573775369674, 0.00020090826728846878, 9.5543291536159813e-05, } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&g0::quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[1*3*3*48] = { 
  /* [0][0][][] */ 4,-3,20,109,4,81,-1,28,15,8,9,7,-8,-9,-45,8,-2,8,-23,-114,-6,-22,127,-10,-3,6,-5,8,-5,5,15,98,20,28,38,-28,1,34,-2,1,17,-68,-8,-9,17,3,-7,-10, 127,10,15,-127,28,87,11,11,124,127,7,43,-50,-24,5,8,127,-56,-60,-56,-101,25,-109,15,17,71,-31,-84,23,21,9,-124,5,-61,127,10,-40,-47,-6,115,-79,-98,-29,3,-35,-8,-127,23, -32,-3,8,15,-1,65,4,18,27,8,-14,31,-14,-3,16,4,-103,29,-3,77,-31,-12,-18,-6,-4,-59,-3,29,-16,5,4,-22,8,-24,16,-19,0,47,41,-13,50,38,-15,11,-43,3,-2,-6, 
  /* [0][1][][] */ 126,7,1,-98,14,-27,35,-16,9,9,-13,53,-7,-1,18,-33,0,-50,-60,-86,10,-73,-124,-18,5,99,-15,-127,-8,33,12,-108,17,-53,-2,127,-3,59,-41,40,-62,-127,39,-88,-45,-14,-13,-5, 26,-127,-127,114,-127,-127,-127,-127,-127,-96,127,-127,127,127,35,-127,-83,127,127,-106,127,127,112,127,127,-127,-127,28,-127,-127,93,127,-127,127,-29,-41,127,-127,127,127,127,-80,127,127,127,-121,102,106, 54,5,49,-13,5,-61,44,19,-24,14,-105,-8,0,-40,127,4,63,-66,-71,85,14,-45,11,-33,1,6,-38,68,20,40,1,3,33,-44,9,66,-5,64,68,-10,-81,9,-84,-31,27,-16,-11,6, 
  /* [0][2][][] */ -53,-7,25,-17,7,35,-37,22,8,-24,12,33,6,-6,-38,18,5,22,-14,105,6,-32,-16,-12,-3,22,0,51,-10,3,46,-32,-18,-44,-32,-40,-1,31,8,-23,9,-4,42,-37,-36,18,-11,17, 68,126,75,21,16,-20,124,35,18,-3,43,26,-5,-1,-90,25,-58,-56,-36,122,-37,49,12,19,32,-63,-40,29,77,1,127,21,85,-26,7,-36,-25,-17,-13,118,-27,-12,-40,45,20,-32,7,-127, -42,-4,7,-3,5,-5,-61,8,-18,-10,-40,-40,20,-9,-9,11,33,24,-9,-127,23,-10,5,-9,-7,10,-10,-55,-15,8,6,8,-20,87,-37,-23,-5,36,25,-61,4,8,-37,7,-43,127,-5,-4, 
};
const TfArray<48, float> quant25_scale = { 48, { 0.013508238829672337, 0.011090355925261974, 0.0080263512209057808, 0.0089495973661541939, 0.0050323428586125374, 0.0041360631585121155, 0.025427147746086121, 0.0059583620168268681, 0.004890752024948597, 0.0055866646580398083, 0.0033571016974747181, 0.0066297692246735096, 0.010337773710489273, 0.0097080618143081665, 0.0038485489785671234, 0.0081623373553156853, 0.0088843032717704773, 0.0095374099910259247, 0.0028188959695398808, 0.0067856945097446442, 0.0081247640773653984, 0.0082450462505221367, 0.0063063623383641243, 0.0059736808761954308, 0.0078269848600029945, 0.0052305245772004128, 0.026257434859871864, 0.0040544047951698303, 0.0076138982549309731, 0.032677222043275833, 0.0044699306599795818, 0.0074731595814228058, 0.030430005863308907, 0.0069929296150803566, 0.0073645729571580887, 0.0060685956850647926, 0.01405875850468874, 0.0065299631096422672, 0.011300724931061268, 0.00087573169730603695, 0.0053479541093111038, 0.0022055679000914097, 0.0055205496028065681, 0.0056509785354137421, 0.0065406141802668571, 0.00430343858897686, 0.0085386009886860847, 0.0040605897083878517, } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&g0::quant18_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[48] = { 97627, 12975, 11519, 13807, 2888, 17383, -3626, -452, 1610, 4101, 5825, 530, 3223, -1568, 1361, -3596, 9586, 21377, -472, 46020, 7699, 4817, 15160, -948, 6403, 9108, 45763, 16826, -154, -4728, 223, 3743, -3803, 16006, 5260, 11866, 13424, 8104, 37052, 3287, -1682, 4551, 1984, 6519, 7754, 4007, -2550, 4640, };
const TfArray<48, float> quant26_scale = { 48, { 4.4181022531120107e-05, 0.00017485753051005304, 0.00013351468078326434, 0.00023343611974269152, 0.00077957275789231062, 0.00028953680885024369, 0.00052982673514634371, 0.00064672593725845218, 0.0003490785020403564, 0.00033399515086784959, 0.00038624482112936676, 0.00027377952937968075, 0.00030326005071401596, 0.00030132621759548783, 0.00031974929152056575, 0.0010108841815963387, 0.00016978575149551034, 0.00019839679589495063, 0.0010910024866461754, 5.8908008213620633e-05, 0.00015742733376100659, 0.00020632444648072124, 0.00026239923317916691, 0.00054717186139896512, 0.00018931251543108374, 0.0001287956110900268, 8.8597837020643055e-05, 0.0002176330890506506, 0.00044954183977097273, 0.00055130204418674111, 0.00030440723639912903, 0.00022444111527875066, 0.00052278290968388319, 0.00013725485769100487, 0.00020114734070375562, 0.00015712411550339311, 0.00027318400680087507, 0.00016596971545368433, 6.3327766838483512e-05, 0.0013809101656079292, 0.00034905565553344786, 0.00060697115259245038, 0.0002451638865750283, 0.0002283768990309909, 0.00015334243653342128, 0.00027264590607956052, 0.00044912172597832978, 0.00057383626699447632, } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&g0::quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[48*1*1*8] = { 
  /* [0][0][][] */ 77,29,-1,-8,127,26,-48,-24, 
  /* [1][0][][] */ -6,-2,2,127,9,-6,6,15, 
  /* [2][0][][] */ 28,-127,-19,40,-6,-66,78,12, 
  /* [3][0][][] */ 127,-31,-8,16,-10,-34,29,6, 
  /* [4][0][][] */ 9,-47,127,-12,-10,-47,12,-93, 
  /* [5][0][][] */ 68,2,2,-3,127,14,-10,-1, 
  /* [6][0][][] */ -15,93,-13,127,26,50,-72,-54, 
  /* [7][0][][] */ -6,127,-3,2,0,-13,15,-2, 
  /* [8][0][][] */ 127,50,-4,6,-50,-23,-1,-37, 
  /* [9][0][][] */ -127,14,6,20,53,10,-8,2, 
  /* [10][0][][] */ -71,-8,13,127,39,28,-15,-3, 
  /* [11][0][][] */ -127,1,12,-64,34,7,-22,-45, 
  /* [12][0][][] */ 127,25,2,16,-46,-12,4,-45, 
  /* [13][0][][] */ -11,77,-127,-8,5,101,-72,74, 
  /* [14][0][][] */ -49,-26,-13,127,21,10,-6,-25, 
  /* [15][0][][] */ -3,127,2,-3,0,-15,10,-50, 
  /* [16][0][][] */ -11,-127,-20,4,-9,-112,117,-28, 
  /* [17][0][][] */ 20,127,1,-12,6,77,-86,-19, 
  /* [18][0][][] */ -8,44,-127,-1,8,54,-32,63, 
  /* [19][0][][] */ -74,18,2,1,-127,3,22,25, 
  /* [20][0][][] */ -127,-23,-1,1,75,-30,42,1, 
  /* [21][0][][] */ -64,-3,-2,2,-127,-4,18,6, 
  /* [22][0][][] */ -127,-25,0,-3,85,-16,36,50, 
  /* [23][0][][] */ -20,-24,-7,-8,-2,82,-127,-90, 
  /* [24][0][][] */ -8,40,-127,3,9,47,-19,76, 
  /* [25][0][][] */ 99,-37,-1,127,-75,-12,10,-49, 
  /* [26][0][][] */ 3,-20,-3,1,-9,121,127,-29, 
  /* [27][0][][] */ 70,-8,-2,13,127,28,35,-19, 
  /* [28][0][][] */ 0,127,-69,5,6,81,-30,123, 
  /* [29][0][][] */ -8,12,-5,-8,-2,88,-127,-85, 
  /* [30][0][][] */ 3,-5,1,-127,-6,0,-3,-13, 
  /* [31][0][][] */ -66,4,3,2,-127,8,13,0, 
  /* [32][0][][] */ -9,35,11,-127,-3,36,-88,-108, 
  /* [33][0][][] */ -64,-7,-1,1,-127,42,43,0, 
  /* [34][0][][] */ -127,74,9,27,40,-24,10,10, 
  /* [35][0][][] */ -19,127,-11,-6,2,-95,73,-30, 
  /* [36][0][][] */ -4,47,7,-27,-2,100,-127,-29, 
  /* [37][0][][] */ 31,-63,-9,23,23,-127,121,-16, 
  /* [38][0][][] */ 10,-127,6,1,11,57,-53,65, 
  /* [39][0][][] */ 3,-127,-13,-6,-3,-11,-49,-96, 
  /* [40][0][][] */ 115,47,4,-9,-52,80,-127,-101, 
  /* [41][0][][] */ 10,-125,19,-1,-5,80,-57,127, 
  /* [42][0][][] */ 51,-8,-3,-127,-50,-1,0,-33, 
  /* [43][0][][] */ -87,-26,12,-127,57,10,-15,-7, 
  /* [44][0][][] */ -5,-27,-4,14,-29,98,127,-13, 
  /* [45][0][][] */ -127,-37,-3,-1,17,10,22,-19, 
  /* [46][0][][] */ 15,78,127,2,-4,13,13,23, 
  /* [47][0][][] */ -3,5,8,127,8,2,4,-3, 
};
const TfArray<48, float> quant27_scale = { 48, { 0.00019171890744473785, 0.00075877585913985968, 0.00057937292149290442, 0.0010129715083166957, 0.0033828739542514086, 0.0012564145727083087, 0.0022991274017840624, 0.0028063992504030466, 0.0015147895319387317, 0.0014493368798866868, 0.001676068757660687, 0.0011880374513566494, 0.0013159650843590498, 0.001307573402300477, 0.0013875184813514352, 0.0043866257183253765, 0.00073676742613315582, 0.00086092203855514526, 0.0047342907637357712, 0.00025562511291354895, 0.00068313936935737729, 0.00089532323181629181, 0.0011386539554223418, 0.0023743947967886925, 0.00082150177331641316, 0.00055889500072225928, 0.00038446101825684309, 0.00094439589884132147, 0.0019507395336404443, 0.0023923171684145927, 0.0013209432363510132, 0.00097393861506134272, 0.002268561627715826, 0.00059560302179306746, 0.00087285775225609541, 0.00068182358518242836, 0.0011854532640427351, 0.00072020816151052713, 0.00027480418793857098, 0.0059923143126070499, 0.0015146903460845351, 0.0026338875759392977, 0.0010638629319146276, 0.00099101755768060684, 0.00066541339037939906, 0.0011831182055175304, 0.0019489165861159563, 0.0024901020806282759, } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&g0::quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[8] = { -4867, -25452, 24357, 22188, 3118, 1075, 37510, 8698, };
const TfArray<8, float> quant28_scale = { 8, { 0.0013078151969239116, 0.00066515186335891485, 0.0013383765472099185, 0.0012875337852165103, 0.001141088898293674, 0.0011526208836585283, 0.0008543236181139946, 0.00076648831600323319, } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[8*1*1*48] = { 
  /* [0][0][][] */ -12,-1,9,-93,10,26,6,6,3,6,2,-5,97,0,1,6,0,-8,-6,0,77,-4,0,5,29,36,13,12,5,4,3,-127,10,6,-1,0,-28,1,-16,33,8,-26,-8,5,2,-2,4,2, 
  /* [1][0][][] */ -36,-8,-3,-6,44,26,-29,76,20,6,-31,-22,12,0,18,37,0,40,18,-47,0,21,127,20,-28,-2,54,4,21,-3,17,-11,14,-8,-8,-21,6,-54,10,4,-7,-8,-79,-8,-32,7,-48,-97, 
  /* [2][0][][] */ -59,15,-1,11,45,-11,29,25,-9,55,8,-6,3,0,6,53,0,12,-127,24,0,13,6,-16,-32,2,37,5,9,30,23,3,7,-7,-11,-13,11,5,4,0,37,-7,-30,0,24,-57,25,14, 
  /* [3][0][][] */ 1,0,-1,8,-5,28,0,-3,65,18,-3,-2,26,0,-30,-8,0,0,-9,1,-3,0,6,-18,-12,-6,-9,-2,-8,-3,-1,-9,-49,44,-55,-2,6,0,3,-127,0,4,1,-51,-2,-1,-1,6, 
  /* [4][0][][] */ 0,-3,80,34,3,-20,-2,-3,3,-4,-2,-8,-80,0,-11,4,0,9,6,0,66,4,1,-4,-15,31,-5,46,-7,-1,0,98,4,4,-1,-2,16,-12,-11,-18,-3,-127,3,3,-1,-3,0,1, 
  /* [5][0][][] */ -7,44,4,-8,3,46,26,12,-20,29,7,54,25,0,-127,-1,0,13,-38,21,-10,10,-14,40,-21,-2,27,-4,-12,23,23,-18,50,28,-38,-5,4,18,-47,16,25,-13,-10,27,21,59,22,23, 
  /* [6][0][][] */ -22,-54,2,7,38,-46,-21,9,26,-25,-12,87,-4,0,-127,40,0,-8,49,-19,-5,2,26,-34,31,-1,-3,-11,47,-13,-12,-4,92,-31,27,-1,-3,-9,-69,-22,-14,-15,-4,-26,-21,-83,-19,-26, 
  /* [7][0][][] */ -113,-24,-12,8,127,19,64,28,14,6,26,-34,-28,0,87,104,0,13,2,61,-12,-1,-29,45,17,6,46,6,50,62,56,-8,-11,-16,-20,-24,5,23,27,35,73,3,-28,-11,59,3,63,77, 
};
const TfArray<8, float> quant29_scale = { 8, { 0.055582147091627121, 0.028268953785300255, 0.056881003081798553, 0.054720185697078705, 0.048496276140213013, 0.048986386507749557, 0.036308754235506058, 0.032575752586126328, } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 56554, 55504, 61510, 42705, -38, 13831, 2631, 30284, 25260, 31243, 30040, 6593, -46518, -127, 38517, 509, -204, 33757, 702, 1993, -15508, 6552, 45268, 37376, -20792, 31005, 42518, 21212, -2367, 15802, -7044, -50382, 11596, 106328, 27404, 1130, 55257, -132, 134642, -27499, 14186, -28008, 1452, 98066, -1645, 83539, 1348, -22522, };
const TfArray<48, float> quant30_scale = { 48, { 0.00010820447641890496, 7.2539405664429069e-05, 0.00017020523955579847, 0.00011893112969119102, 0.00013410409155767411, 0.00016011690604500473, 0.00012612459249794483, 5.7254826970165595e-05, 8.7399937910959125e-05, 3.1897117878543213e-05, 7.9502089647576213e-05, 3.0091043299762532e-05, 0.00017632565868552774, 0.005541567225009203, 6.6638553107623011e-05, 0.0002222962211817503, 0.0027484172023832798, 2.095053787343204e-05, 9.369442705065012e-05, 0.00016762077575549483, 0.00011479973181849346, 0.00014718122838530689, 0.00013153940381016582, 3.459762956481427e-05, 8.8625769421923906e-05, 8.7751439423300326e-05, 3.3518583222758025e-05, 4.7599914978491142e-05, 0.00029206639737822115, 5.7900324463844299e-05, 4.9711081373970956e-05, 0.00018254059250466526, 0.00021142451441846788, 1.0852198101929389e-05, 8.6719031969550997e-05, 0.00021838919201400131, 1.7265330825466663e-05, 0.00042600173037499189, 3.3828328014351428e-05, 9.547912486596033e-05, 7.1974129241425544e-05, 0.00023031004820950329, 0.00011632725363597274, 1.1090257430623751e-05, 0.00015250264550559223, 7.1438349550589919e-05, 0.00022763801098335534, 0.00012558081652969122, } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&g0::quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[1*3*3*48] = { 
  /* [0][0][][] */ -43,-22,-7,-17,7,-39,-79,-68,-27,-50,8,65,34,-71,114,-43,-113,-84,37,-6,-1,-71,-111,-79,-35,-125,-63,-20,71,15,95,26,-127,-89,-7,54,18,48,-127,78,-76,-14,105,-108,-3,-35,-87,107, 75,12,-28,-28,57,-127,-127,-81,61,-76,-116,108,37,-82,-1,62,-52,-113,59,7,10,-112,-127,-70,-4,-127,-120,-40,-54,21,-57,54,28,-127,65,84,13,72,-92,127,-127,6,125,-127,2,-23,-127,94, -32,43,6,-5,-64,-108,-58,-17,87,-8,-127,38,8,-71,-101,-11,-127,-25,27,12,-16,-76,-36,-23,-11,-29,-58,-12,-10,18,-24,9,107,-86,70,32,14,36,-4,16,-79,3,7,-79,-17,5,-55,15, 
  /* [0][1][][] */ -85,-127,-44,-43,-10,54,99,-105,-27,-108,-21,112,90,-64,27,-96,-121,-94,89,-77,41,-88,-103,-127,42,-118,-78,-38,127,-60,127,84,-43,-84,-15,84,-35,-77,-107,89,42,59,104,-108,-91,-117,82,120, 127,-83,-127,-127,127,41,93,-127,101,-127,-111,127,127,-14,-6,127,-60,-127,127,-127,127,-127,-120,-119,127,-99,-127,-127,-120,-127,-71,127,28,-111,127,127,-68,-127,-96,90,61,127,127,-117,-112,-127,125,127, -53,31,-61,-85,-119,-23,31,-37,127,-20,-77,35,56,-70,-25,-43,-37,-30,54,-71,56,-81,-38,-23,48,-5,-45,-60,15,-89,-35,20,30,-98,117,23,-36,-62,2,-15,37,53,10,-74,-57,-37,65,36, 
  /* [0][2][][] */ -61,-107,-34,-34,0,34,-5,-34,-38,-59,-16,59,77,-127,-127,-63,-43,-19,64,75,52,-33,-13,-60,33,-54,-11,-59,76,29,77,62,108,-26,-38,-9,-95,35,-18,30,9,37,15,-56,96,-77,4,31, 87,-74,-88,-85,81,18,7,-47,48,-71,-32,56,83,-26,16,93,-24,-31,77,117,81,-53,-18,-57,94,-67,-18,-99,-50,39,-45,111,-18,-49,67,6,-127,50,-15,-1,10,32,15,-66,127,-100,-12,40, -28,29,-41,-36,-79,-19,22,-11,59,-4,-13,32,31,-43,111,-29,-93,-5,30,59,74,-28,-1,-2,43,2,-4,-63,-13,28,-20,39,-90,-43,65,3,-20,21,27,-39,7,35,-6,-15,63,-34,-4,18, 
};
const TfArray<48, float> quant31_scale = { 48, { 0.0045986901968717575, 0.0030829247552901506, 0.0072337226010859013, 0.0050545730628073215, 0.00569942407310009, 0.0068049682304263115, 0.0053602950647473335, 0.0024333300534635782, 0.0037144972011446953, 0.0013556275516748428, 0.0033788387663662434, 0.001278869342058897, 0.0074938405305147171, 0.23551659286022186, 0.0028321384452283382, 0.0094475895166397095, 0.1168077290058136, 0.00089039781596511602, 0.0039820130914449692, 0.007123882882297039, 0.0048789884895086288, 0.0062552019953727722, 0.005590424407273531, 0.0014703992055729032, 0.0037665951531380415, 0.0037294360809028149, 0.0014245398342609406, 0.002022996312007308, 0.012412821874022484, 0.0024607637897133827, 0.0021127208601683378, 0.0077579752542078495, 0.0089855417609214783, 0.00046121841296553612, 0.0036855586804449558, 0.0092815402895212173, 0.00073377654189243913, 0.018105072900652885, 0.0014377038460224867, 0.0040578627958893776, 0.0030589003581553698, 0.0097881769761443138, 0.00494390819221735, 0.00047133592306636274, 0.0064813625067472458, 0.003036129754036665, 0.0096746152266860008, 0.0053371847607195377, } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&g0::quant18_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[48] = { 6083, 151, 13652, 8802, 10253, 8875, 14706, -59, 67, -431, 3486, 611, 16728, -112837536, 3823, 27620, -91088312, -157, -665, 17959, 5255, -27, 0, 570, 4780, -1175, 96, 808, 5493, 2546, 3272, 18890, 5332, 484, 438, -3078, 573, 4829, -192, 18613, 3260, 16791, -473, -129, 19095, 244, 14523, 6787, };
const TfArray<48, float> quant32_scale = { 48, { 0.0003447423514444381, 0.00032197308610193431, 0.0002316122263437137, 0.00021469096827786416, 0.00019454180437605828, 0.00023306407092604786, 0.00025974449818022549, 0.0008649538503959775, 0.00026964163407683372, 0.001756371115334332, 0.00042459103860892355, 0.0014019643422216177, 0.00013219317770563066, 1.4373200407646891e-09, 0.00068630866007879376, 0.00011953190551139414, 1.4373200407646891e-09, 0.0046158991754055023, 0.00029658433049917221, 0.00021569656382780522, 0.00020600395509973168, 0.0032217989210039377, 0.00022337958216667175, 0.0011167918564751744, 0.00079446670133620501, 0.00046865953481756151, 0.0015551502583548427, 0.0015419487608596683, 0.00020544292056001723, 0.0011546816676855087, 0.00090297381393611431, 0.00012387402239255607, 0.00014346626994665712, 0.0066609960049390793, 0.00031526075326837599, 0.00038885456160642207, 0.0026715653948485851, 0.00026491825701668859, 0.0019408563384786248, 0.00018658254703041166, 0.00087010639254003763, 0.00013181952817831188, 0.00034155865432694554, 0.006341822911053896, 0.00026330584660172462, 0.00039212219417095184, 0.00019302585860714316, 0.00012950791278854012, } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&g0::quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[48*1*1*8] = { 
  /* [0][0][][] */ 16,-127,50,-44,28,-17,-50,23, 
  /* [1][0][][] */ 71,66,-22,-95,11,-12,-79,127, 
  /* [2][0][][] */ 31,6,-46,126,53,127,48,93, 
  /* [3][0][][] */ 81,73,-82,127,-94,-7,-9,14, 
  /* [4][0][][] */ -35,-102,74,10,6,31,-45,-127, 
  /* [5][0][][] */ 20,6,-34,42,3,-31,40,127, 
  /* [6][0][][] */ 57,-18,-127,-89,110,14,50,-36, 
  /* [7][0][][] */ 127,17,21,-23,29,-6,86,-60, 
  /* [8][0][][] */ 21,-98,13,104,2,24,-12,-127, 
  /* [9][0][][] */ 105,-127,14,-2,-13,13,-121,88, 
  /* [10][0][][] */ -127,-36,-117,19,-11,5,-102,53, 
  /* [11][0][][] */ -21,-43,-8,-105,-127,-34,47,-16, 
  /* [12][0][][] */ 16,7,-39,67,-75,-23,58,127, 
  /* [13][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [14][0][][] */ -6,-33,-6,11,42,127,46,41, 
  /* [15][0][][] */ 42,2,17,-127,66,39,-56,74, 
  /* [16][0][][] */ 0,0,0,0,0,0,0,0, 
  /* [17][0][][] */ 15,24,127,22,-27,-9,29,30, 
  /* [18][0][][] */ 89,-127,25,33,-5,20,-118,3, 
  /* [19][0][][] */ -127,-13,28,75,-57,-58,-99,70, 
  /* [20][0][][] */ 34,32,-42,113,-22,-127,-5,61, 
  /* [21][0][][] */ 56,22,127,9,-14,-10,67,11, 
  /* [22][0][][] */ -78,-17,-127,3,5,10,-100,4, 
  /* [23][0][][] */ -101,127,-18,-21,8,-11,127,-77, 
  /* [24][0][][] */ 6,-54,-51,85,-9,-60,98,127, 
  /* [25][0][][] */ 12,45,35,31,127,124,-76,-52, 
  /* [26][0][][] */ -84,-30,-127,-3,7,14,-92,0, 
  /* [27][0][][] */ 1,-26,-31,7,-42,127,66,49, 
  /* [28][0][][] */ 2,-18,-20,40,23,127,51,60, 
  /* [29][0][][] */ 89,29,127,2,-18,-15,86,-6, 
  /* [30][0][][] */ -80,127,-24,-27,10,-5,100,-49, 
  /* [31][0][][] */ -43,-96,-20,3,32,-72,127,110, 
  /* [32][0][][] */ 5,6,-51,121,-14,101,91,127, 
  /* [33][0][][] */ 2,63,-10,-107,11,-10,-9,127, 
  /* [34][0][][] */ -25,88,-5,-100,30,-11,17,127, 
  /* [35][0][][] */ 127,8,-15,-41,20,31,103,-42, 
  /* [36][0][][] */ -127,-7,26,62,-37,13,-115,80, 
  /* [37][0][][] */ -6,-23,-11,26,30,127,49,52, 
  /* [38][0][][] */ 12,21,6,83,127,-7,-20,34, 
  /* [39][0][][] */ 7,28,39,-127,28,0,-43,126, 
  /* [40][0][][] */ 94,28,127,1,-12,-9,93,-8, 
  /* [41][0][][] */ 0,-29,-31,85,54,127,74,104, 
  /* [42][0][][] */ -76,-5,127,21,-36,14,-27,60, 
  /* [43][0][][] */ -12,-52,9,97,-17,5,15,-127, 
  /* [44][0][][] */ 34,-4,-72,-127,70,-26,-9,-110, 
  /* [45][0][][] */ -88,127,0,-51,10,1,74,-57, 
  /* [46][0][][] */ -127,-22,34,20,-30,32,-82,36, 
  /* [47][0][][] */ 112,20,125,-1,29,-21,127,-16, 
};
const TfArray<48, float> quant33_scale = { 48, { 0.00094429444288834929, 0.00088192650582641363, 0.000634416239336133, 0.00058806670131161809, 0.00053287547780200839, 0.00063839304493740201, 0.00071147421840578318, 0.0023692219983786345, 0.00073858373798429966, 0.0048109306953847408, 0.001163010485470295, 0.0038401640485972166, 0.00036209443351253867, 3.937008052901092e-09, 0.0018798894016072154, 0.00032741355244070292, 3.937008052901092e-09, 0.012643552385270596, 0.00081238336861133575, 0.00059082114603370428, 0.00056427181698381901, 0.0088249295949935913, 0.00061186595121398568, 0.0030590393580496311, 0.0021761483512818813, 0.0012837199028581381, 0.0042597604915499687, 0.0042235995642840862, 0.00056273507652804255, 0.0031628245487809181, 0.0024733636528253555, 0.00033930718200281262, 0.00039297292823903263, 0.018245341256260872, 0.00086354051018133759, 0.0010651235934346914, 0.0073177674785256386, 0.00072564580477774143, 0.0053162598051130772, 0.00051107403123751283, 0.0023833354935050011, 0.00036107096821069717, 0.00093557388754561543, 0.017371084541082382, 0.00072122918209061027, 0.0010740740690380335, 0.00052872311789542437, 0.00035473913885653019, } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&g0::quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[8] = { -1163, -43042, -7782, -12675, -32199, -2058, -24884, -27187, };
const TfArray<8, float> quant34_scale = { 8, { 0.0019634491764008999, 0.0020082551054656506, 0.0024015838280320168, 0.0011171650839969516, 0.0012638637563213706, 0.0022515396121889353, 0.0013701646821573377, 0.00098884198814630508, } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[8*1*1*16] = { 
  /* [0][0][][] */ 0,-22,2,-1,126,0,-1,1,0,-127,-92,-4,0,123,-2,0, 
  /* [1][0][][] */ 0,-29,0,85,73,14,23,7,0,-5,127,-43,0,29,-12,0, 
  /* [2][0][][] */ 0,1,-1,-12,-58,4,10,2,0,3,-17,1,0,127,-8,0, 
  /* [3][0][][] */ 0,-11,-20,-127,81,24,70,17,0,61,-1,39,0,-1,19,0, 
  /* [4][0][][] */ 0,50,-26,35,-55,31,127,10,0,-61,17,-9,0,-6,16,0, 
  /* [5][0][][] */ 0,-16,-11,0,-23,-23,-12,16,0,9,-5,-44,0,-5,127,0, 
  /* [6][0][][] */ 0,18,-3,1,50,-22,-24,-8,0,-106,114,61,0,127,61,0, 
  /* [7][0][][] */ 0,14,-16,127,7,-3,17,9,0,68,-52,76,0,-8,49,0, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant35_scale = { 8, { 0.083446592092514038, 0.085350841283798218, 0.10206731408834457, 0.04747951403260231, 0.05371420830488205, 0.095690429210662842, 0.058231998234987259, 0.042025785893201828, } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&g0::quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[16] = { -161, 23036, 23225, 13714, 11999, 20276, 13409, 18269, -3482, 7581, 30116, 14617, -445, 26765, 11042, -107, };
const TfArray<16, float> quant36_scale = { 16, { 0.0018688903655856848, 0.00011221800377825275, 0.00017289204697590321, 0.00025569301215000451, 0.00015159643953666091, 0.00016357704589609057, 0.00038849795237183571, 0.00021340475359465927, 3.0765007977606729e-05, 0.00023884139955043793, 0.0001935862674145028, 0.00076531170634552836, 0.00072724185883998871, 0.00023714319104328752, 0.00019019003957509995, 0.003907486330717802, } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[1*3*3*16] = { 
  /* [0][0][][] */ -108,19,-82,-126,39,-67,80,-76,-90,-3,-8,29,-127,5,54,-73, 51,25,-127,127,127,-127,127,-127,-85,127,-127,51,-105,5,127,-25, 24,-24,91,-2,-72,67,-95,77,-95,-27,4,-16,61,1,-102,-29, 
  /* [0][1][][] */ -127,127,-22,13,-44,15,-29,14,-28,0,3,-109,-49,8,-30,-14, -78,-41,-57,-15,-7,-26,8,-28,-108,-89,21,-12,-104,-127,1,23, 14,1,65,2,3,34,-26,33,-127,6,-2,1,-21,12,-4,43, 
  /* [0][2][][] */ -115,-72,69,2,-6,39,-39,52,-76,0,0,4,40,2,-27,23, 23,-4,31,-2,-27,40,-34,21,-125,-13,0,84,-58,0,-29,-111, 21,-7,19,0,4,14,9,22,-115,4,-1,-127,107,3,17,-127, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant37_scale = { 16, { 0.079427838325500488, 0.0047692651860415936, 0.0073479120619595051, 0.010866953060030937, 0.0064428485929965973, 0.0069520245306193829, 0.016511162742972374, 0.0090697016566991806, 0.001307512866333127, 0.010150759480893612, 0.0082274163141846657, 0.032525748014450073, 0.030907778069376945, 0.010078585706651211, 0.0080830762162804604, 0.16606816649436951, } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&g0::quant4_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[16] = { -1073741824, -38624, -98911, 196617, 900930, -132662, 218337, -95389, 446000, 183959, 97856, 1009582, -1073741824, 174056, 193708, -1073741824, };
const TfArray<16, float> quant38_scale = { 16, { 1.3102037232926023e-09, 7.8509998274967074e-05, 8.0223602708429098e-05, 1.7381238649250008e-05, 5.0607554840098601e-06, 7.9730627476237714e-05, 1.5188107681751717e-05, 0.00011368464765837416, 1.2592047369253123e-06, 2.0762059648404829e-05, 3.0581268219975755e-05, 5.2435998441069387e-06, 1.1533876076441629e-09, 2.1719615688198246e-05, 1.2976005564269144e-05, 1.243374708748135e-10, } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[16*3*3*3] = { 
  /* [0][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [0][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [1][0][][] */ 46,-5,29, -5,-24,14, -127,-121,-68, 
  /* [1][1][][] */ 2,-6,-2, -22,2,-6, 1,-32,4, 
  /* [1][2][][] */ -4,16,-3, -5,6,-3, 39,-19,12, 
  /* [2][0][][] */ 30,-6,-6, 77,114,1, 41,-39,8, 
  /* [2][1][][] */ 10,12,-1, 71,127,-28, 21,-5,-6, 
  /* [2][2][][] */ 50,-66,20, 75,-43,-21, 34,-54,15, 
  /* [3][0][][] */ 7,33,4, 33,95,22, 1,6,-4, 
  /* [3][1][][] */ 21,36,6, 68,127,27, -12,-18,4, 
  /* [3][2][][] */ 6,4,5, 27,27,9, 0,-3,4, 
  /* [4][0][][] */ 42,76,-8, 18,86,-10, -16,9,-3, 
  /* [4][1][][] */ 49,96,53, 35,127,33, 31,53,-16, 
  /* [4][2][][] */ 56,79,35, 46,122,13, -25,21,18, 
  /* [5][0][][] */ 8,2,-119, -3,1,-103, -5,28,-27, 
  /* [5][1][][] */ 5,-42,-127, 0,-44,-114, -1,13,-23, 
  /* [5][2][][] */ -2,9,-17, 3,-1,-10, 2,14,-10, 
  /* [6][0][][] */ 25,-63,34, 48,-87,40, 10,-20,9, 
  /* [6][1][][] */ 37,-96,62, 64,-127,72, 8,-28,17, 
  /* [6][2][][] */ 21,-34,14, 15,-44,26, -12,8,0, 
  /* [7][0][][] */ -31,17,4, -108,-39,1, -24,23,2, 
  /* [7][1][][] */ -13,-8,1, -127,-93,-7, -6,-5,5, 
  /* [7][2][][] */ -23,30,-9, -13,11,0, -22,25,-3, 
  /* [8][0][][] */ 110,127,73, 105,125,67, 106,119,64, 
  /* [8][1][][] */ 110,120,67, 98,112,58, 104,113,57, 
  /* [8][2][][] */ 104,114,65, 98,114,60, 102,111,58, 
  /* [9][0][][] */ -22,-4,8, -13,-6,0, 4,4,-9, 
  /* [9][1][][] */ 95,112,-9, 74,127,17, -6,21,27, 
  /* [9][2][][] */ -24,-23,17, 4,-29,1, 11,4,-19, 
  /* [10][0][][] */ -25,-83,-18, 34,95,20, -9,-13,-2, 
  /* [10][1][][] */ -59,-103,-14, 79,127,15, -17,-26,0, 
  /* [10][2][][] */ -31,-19,2, 36,23,-11, -8,-1,7, 
  /* [11][0][][] */ -8,-20,5, 14,-36,10, 13,-93,-46, 
  /* [11][1][][] */ -40,-36,-13, -29,-57,-31, -10,-53,-48, 
  /* [11][2][][] */ -3,-34,-72, 118,127,66, -33,17,-41, 
  /* [12][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [12][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [13][0][][] */ -51,-97,-17, -61,-111,-25, -9,-18,-6, 
  /* [13][1][][] */ 61,114,15, 58,127,25, 7,16,11, 
  /* [13][2][][] */ -8,-19,3, 1,-19,-2, 0,4,-4, 
  /* [14][0][][] */ 45,-7,-38, 78,-27,-51, 31,-10,-21, 
  /* [14][1][][] */ 89,-17,-74, 127,-41,-89, 58,-19,-38, 
  /* [14][2][][] */ 55,-10,-46, 73,-22,-53, 25,-7,-19, 
  /* [15][0][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][1][][] */ 0,0,0, 0,0,0, 0,0,0, 
  /* [15][2][][] */ 0,0,0, 0,0,0, 0,0,0, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 16,3,3,3 } };
const TfArray<16, float> quant39_scale = { 16, { 3.3410194077987398e-07, 0.020020049065351486, 0.020457018166780472, 0.0044322158209979534, 0.0012904925970360637, 0.020331308245658875, 0.0038729673251509666, 0.028989583253860474, 0.00032109717722050846, 0.0052943248301744461, 0.007798223290592432, 0.0013371178647503257, 2.9411381774480105e-07, 0.0055385017767548561, 0.0033088813070207834, 3.1706054670621597e-08, } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&g0::quant4_zero, 0 };
const TfArray<4, int> tensor_dimension40 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant40_scale = { 1, { 0.023529412224888802, } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&g0::quant0_zero, 0 };
const TfArray<4, int> tensor_dimension42 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant42_scale = { 1, { 0.36507928371429443, } };
const TfArray<1, int> quant42_zero = { 1, { 6 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const TfArray<4, int> tensor_dimension43 = { 4, { 1,48,48,48 } };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,49,49,48 } };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,48 } };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.23044687509536743, } };
const TfArray<1, int> quant46_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<1, float> quant49_scale = { 1, { 0.3450046181678772, } };
const TfArray<1, int> quant49_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<1, float> quant50_scale = { 1, { 0.39388185739517212, } };
const TfArray<1, int> quant50_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,25,25,48 } };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant54_scale = { 1, { 0.21238188445568085, } };
const TfArray<1, int> quant54_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant57_scale = { 1, { 0.16436067223548889, } };
const TfArray<1, int> quant57_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<1, float> quant58_scale = { 1, { 0.22510786354541779, } };
const TfArray<1, int> quant58_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<1, float> quant61_scale = { 1, { 0.16977083683013916, } };
const TfArray<1, int> quant61_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<1, float> quant62_scale = { 1, { 0.28775843977928162, } };
const TfArray<1, int> quant62_zero = { 1, { 9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,39,38 } };
const TfArray<1, int> outputs0 = { 1, { 40 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 40,37,36 } };
const TfArray<1, int> outputs1 = { 1, { 41 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 41,35,34 } };
const TfArray<1, int> outputs2 = { 1, { 42 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 42,33,32 } };
const TfArray<1, int> outputs3 = { 1, { 43 } };
const TfArray<2, int> inputs4 = { 2, { 43,1 } };
const TfArray<1, int> outputs4 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 44,31,30 } };
const TfArray<1, int> outputs5 = { 1, { 45 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 45,29,28 } };
const TfArray<1, int> outputs6 = { 1, { 46 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 46,27,26 } };
const TfArray<1, int> outputs7 = { 1, { 47 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 47,25,24 } };
const TfArray<1, int> outputs8 = { 1, { 48 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 48,23,22 } };
const TfArray<1, int> outputs9 = { 1, { 49 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 46,49 } };
const TfArray<1, int> outputs10 = { 1, { 50 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 50,21,20 } };
const TfArray<1, int> outputs11 = { 1, { 51 } };
const TfArray<2, int> inputs12 = { 2, { 51,1 } };
const TfArray<1, int> outputs12 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 52,19,18 } };
const TfArray<1, int> outputs13 = { 1, { 53 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 53,17,16 } };
const TfArray<1, int> outputs14 = { 1, { 54 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 54,15,14 } };
const TfArray<1, int> outputs15 = { 1, { 55 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 55,13,12 } };
const TfArray<1, int> outputs16 = { 1, { 56 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 56,11,10 } };
const TfArray<1, int> outputs17 = { 1, { 57 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 54,57 } };
const TfArray<1, int> outputs18 = { 1, { 58 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 58,9,8 } };
const TfArray<1, int> outputs19 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 59,7,6 } };
const TfArray<1, int> outputs20 = { 1, { 60 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 60,5,4 } };
const TfArray<1, int> outputs21 = { 1, { 61 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 58,61 } };
const TfArray<1, int> outputs22 = { 1, { 62 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 62,3,2 } };
const TfArray<1, int> outputs23 = { 1, { 63 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension2, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension2, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension3, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension2, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension7, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension2, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension3, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension19, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension22, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension23, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension19, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension22, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension40, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension40, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension42, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension43, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension44, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension45, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension45, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension45, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension54, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension55, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension54, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension55, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension54, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension54, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[24] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[24] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 64, };
const size_t tflNodes_subgraph_index[] = {0, 24, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  63, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_61_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 64;
  for (size_t i = 0; i < 64; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_61_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_61_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_61_invoke() {
  for (size_t i = 0; i < 24; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_61_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
