/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 01.07.2025 10:47:19

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 59504;
#else
constexpr int kTensorArenaSize = 58480;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_AVERAGE_POOL_2D, OP_RESHAPE, OP_SUB, OP_MUL, OP_SUM, OP_ADD, OP_REDUCE_MAX, OP_EXP, OP_LOG, OP_DIV, OP_ABS,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 3;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 3;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,12,12,96 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data1[1*5*5*4] = { 
  /* [0][0][][] */ -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, 
  /* [0][1][][] */ -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, 
  /* [0][2][][] */ -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, 
  /* [0][3][][] */ -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, 
  /* [0][4][][] */ -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, -2.1088447570800781,-2.6084978580474854,-4.6142253875732422,-2.4680440425872803, 
};
const TfArray<4, int> tensor_dimension1 = { 4, { 1,5,5,4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data2[4] = { 1, 5, 5, 1, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(4) int32_t tensor_data3[1] = { 3, };
const TfArray<1, int> tensor_dimension3 = { 1, { 1 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(4) int32_t tensor_data4[1] = { 4, };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[5] = { 1, 5, 5, 4, 4, };
const TfArray<1, int> tensor_dimension5 = { 1, { 5 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data6[4*96] = { 
  -0.54281532764434814, 0.4986727237701416, 0.14148925244808197, -0.75314736366271973, -0.28930011391639709, 0.82571828365325928, -1.2133395671844482, -0.21445631980895996, 0.63296812772750854, -0.4333702027797699, -0.33944308757781982, -0.047354485839605331, 0.74569481611251831, -0.31945100426673889, -0.22199097275733948, -0.21717563271522522, 1.1029649972915649, 1.093393087387085, 0.50202697515487671, 0.1930931955575943, 0.36868429183959961, 0.74536603689193726, -0.46791693568229675, 0.58791452646255493, -0.62694031000137329, -0.3188757598400116, 0.45355260372161865, -0.71434032917022705, -0.070034362375736237, -0.4308774471282959, -0.12780968844890594, -1.3992944955825806, -0.88576656579971313, -0.34993863105773926, 0.46373122930526733, -0.086817838251590729, 0.0014229579828679562, 0.34411135315895081, -0.43976816534996033, 0.14181366562843323, -0.40268325805664062, -0.86383473873138428, -0.19544990360736847, 0.28690293431282043, 0.16929452121257782, -0.0059152473695576191, 1.1961826086044312, 0.20645608007907867, 0.48936799168586731, 1.1190717220306396, -0.64704263210296631, -0.51939409971237183, 0.87185609340667725, -0.3990313708782196, 0.014841615222394466, 0.53465795516967773, 0.44535320997238159, 0.87744307518005371, 0.74782204627990723, 0.53469634056091309, -0.38635435700416565, 0.39743134379386902, 0.15713599324226379, -0.66313272714614868, 0.70864951610565186, 0.40361827611923218, 0.02274504117667675, -0.11654602736234665, -0.59915059804916382, 0.099762037396430969, 0.23421956598758698, -0.41557750105857849, 0.58110201358795166, -0.54860150814056396, -1.0615501403808594, 0.5198635458946228, -0.20168301463127136, -0.063014790415763855, -0.41875836253166199, -0.80298137664794922, 0.62761867046356201, -0.34443449974060059, 0.83047622442245483, 0.40365409851074219, -0.15737907588481903, -0.54295122623443604, -0.36623099446296692, -0.60626155138015747, 1.0435566902160645, 0.082220613956451416, 0.57510274648666382, -0.63367605209350586, 0.090517565608024597, 0.58893096446990967, -0.16750538349151611, 0.51555722951889038, 
  -0.54228395223617554, -0.68173575401306152, 0.18970030546188354, -0.18958821892738342, 0.32102733850479126, -0.98894399404525757, 0.35613232851028442, 1.2991520166397095, -0.012312990613281727, 0.017071064561605453, 0.089774742722511292, -0.93098783493041992, 0.21307331323623657, -0.80270487070083618, -0.21383979916572571, 0.62143474817276001, -0.36760848760604858, 0.25062450766563416, 0.50636953115463257, 0.13937042653560638, -0.6854742169380188, -0.16623763740062714, 0.97970569133758545, -1.0125229358673096, -0.13789300620555878, -0.2760540246963501, 0.060373682528734207, 0.37410780787467957, 0.80434548854827881, -0.13511618971824646, 0.40617066621780396, 0.24987007677555084, 0.2371736466884613, -0.28196197748184204, -0.49866074323654175, -0.55002152919769287, -0.37821859121322632, 0.16084328293800354, 0.38047468662261963, 0.16173441708087921, -0.27447754144668579, 0.90298503637313843, 0.75943279266357422, -0.17700006067752838, -0.41171571612358093, 0.065107479691505432, 0.63364934921264648, 0.16638249158859253, 0.27827435731887817, -0.10604006052017212, 0.22813545167446136, 0.77227222919464111, -0.11983439326286316, 0.071653865277767181, 0.12690824270248413, 0.14186267554759979, -0.70594441890716553, -0.93843430280685425, -0.50982755422592163, 0.08397115021944046, 0.27692809700965881, -0.26533728837966919, 0.68862873315811157, -0.071587987244129181, 0.010157999582588673, -0.096981935203075409, 0.067013397812843323, 0.3522370457649231, 0.33282673358917236, -0.4492114782333374, 0.76183187961578369, -0.54751324653625488, 0.039613507688045502, -0.13719828426837921, -0.52449584007263184, -0.037560295313596725, -0.37040689587593079, 0.036453623324632645, 0.20154297351837158, 0.73596465587615967, 0.15369211137294769, -0.30561268329620361, -0.19580990076065063, 0.069989055395126343, 0.046730414032936096, 0.72979462146759033, 0.69767647981643677, -0.17946796119213104, -0.274321049451828, -1.2785272598266602, -0.27446019649505615, -0.48902884125709534, -0.17741222679615021, 0.19579212367534637, 0.088596165180206299, -0.014984003268182278, 
  0.099791057407855988, -0.06305888295173645, 0.098509468138217926, -1.6155275106430054, -0.13464674353599548, -0.055425360798835754, -0.17063085734844208, -0.10897313058376312, 0.35165506601333618, -0.2990526556968689, 1.100351095199585, 0.34414845705032349, -0.0031536254100501537, -0.10333114862442017, -0.043261144310235977, -0.45765352249145508, -0.047601271420717239, 0.13934175670146942, 0.28977081179618835, 0.28984490036964417, -0.13743877410888672, -0.70804113149642944, -0.33455130457878113, 0.80609649419784546, 0.44802916049957275, 0.18480978906154633, -0.38064712285995483, 0.0018225774401798844, -0.62783432006835938, -0.27596843242645264, -0.12260167300701141, -0.18081997334957123, 0.47830095887184143, -0.70936298370361328, -0.43271613121032715, -0.6873440146446228, -0.61867660284042358, 0.062027949839830399, -0.80022025108337402, 0.37693437933921814, -0.12340788543224335, 0.034394167363643646, 0.16128836572170258, -0.21708326041698456, 0.51623988151550293, -0.097171366214752197, 0.29703512787818909, -0.099556192755699158, 0.14543719589710236, 0.13983133435249329, 0.124984972178936, -0.48715391755104065, 0.2179378867149353, -0.15947850048542023, 0.31524401903152466, -1.0762467384338379, -0.73255813121795654, 0.18172277510166168, 0.93146377801895142, 0.41752937436103821, -0.34122547507286072, -0.84602618217468262, 0.37134310603141785, -0.040291611105203629, 0.29535210132598877, 0.057649362832307816, 0.014821462333202362, 1.4793127775192261, -0.0030649804975837469, -0.079622603952884674, -0.06072433665394783, -0.29176837205886841, 0.49506643414497375, -0.17687717080116272, 0.31797134876251221, 0.14230151474475861, 0.6094929575920105, 0.21008980274200439, -0.60669237375259399, -0.66324388980865479, 0.70418459177017212, -0.30435541272163391, -0.66030126810073853, -0.33480930328369141, 0.63231265544891357, -0.7101064920425415, -0.43324759602546692, -0.33340376615524292, -0.62559491395950317, -0.59216368198394775, -0.75905400514602661, -0.23059371113777161, -0.17745441198348999, -0.34126907587051392, -0.82684892416000366, 0.62666797637939453, 
  -0.6645393967628479, 0.13901685178279877, -0.5373833179473877, 0.33415842056274414, 0.4779161810874939, -0.43880680203437805, -0.96185785531997681, 0.34789365530014038, 0.93790024518966675, 0.20784726738929749, 0.080272212624549866, 0.40988031029701233, 0.38252741098403931, -0.41449442505836487, -0.32957565784454346, 0.30556178092956543, -0.072006672620773315, 0.65830278396606445, -0.35217106342315674, 0.37530496716499329, 0.17131899297237396, -0.063218779861927032, 0.58795541524887085, 0.34003576636314392, -0.50248360633850098, 0.32010933756828308, 0.68749529123306274, -0.065222345292568207, -0.12432792782783508, -0.33482357859611511, -0.0068019428290426731, 0.34310033917427063, -0.40883415937423706, -0.67317879199981689, -0.18787495791912079, -0.68986248970031738, 0.26160922646522522, -0.21334488689899445, -0.87770092487335205, -0.17430375516414642, -0.09630749374628067, 0.22456780076026917, -0.072681769728660583, 0.93436324596405029, -0.2593519389629364, -0.031199274584650993, -0.051455307751893997, -0.14131419360637665, 0.071212790906429291, 0.27061563730239868, 0.67004936933517456, -0.78462809324264526, -0.25517144799232483, -0.22388571500778198, 0.46892514824867249, -0.17833152413368225, -0.94758778810501099, 0.043865233659744263, -0.016844615340232849, 0.089875780045986176, -0.52008146047592163, 0.85951733589172363, -0.1619298905134201, -0.094148427248001099, -0.45000427961349487, -0.46550101041793823, -0.61136847734451294, -0.19665542244911194, -0.47879090905189514, 1.0282336473464966, -0.94424617290496826, -0.56416529417037964, -0.20070721209049225, 0.33674564957618713, -0.20687843859195709, 0.3379817008972168, -0.49340194463729858, 0.029645567759871483, 0.87202054262161255, -0.48387220501899719, 0.20978383719921112, 0.10346376150846481, -1.1257674694061279, -0.29448527097702026, 0.56557595729827881, 0.067538835108280182, -0.60613447427749634, 0.34538865089416504, -0.23956146836280823, 0.1800253689289093, 0.18846005201339722, -0.55934780836105347, 0.39491403102874756, -0.5037543773651123, -0.65289294719696045, -0.44141450524330139, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 4,96 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data7[16*4] = { 
  0.60884088277816772, 0, 0, 0, 
  0.045422308146953583, 0.63843756914138794, 0, 0, 
  0.03609369695186615, -0.062258366495370865, 1.0645630359649658, 0, 
  -0.11339790374040604, -0.15932254493236542, -0.032011281698942184, 0.75517481565475464, 
  0.48269173502922058, 0, 0, 0, 
  0.092132292687892914, 0.68257880210876465, 0, 0, 
  -0.063538864254951477, -0.10907690972089767, 1.2895984649658203, 0, 
  0.16195549070835114, -0.030408840626478195, -0.45244157314300537, 0.94683682918548584, 
  0.36193355917930603, 0, 0, 0, 
  0.1250697523355484, 0.3929048478603363, 0, 0, 
  0.034372907131910324, -0.32612729072570801, 0.83474421501159668, 0, 
  -0.19470669329166412, -0.18443052470684052, 0.10781890898942947, 0.62608891725540161, 
  0.52967959642410278, 0, 0, 0, 
  0.080623693764209747, 0.69606006145477295, 0, 0, 
  -0.073713198304176331, -0.16868054866790771, 0.99010998010635376, 0, 
  0.14138230681419373, 0.139785036444664, -0.073252201080322266, 0.78651666641235352, 
};
const TfArray<2, int> tensor_dimension7 = { 2, { 16,4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data8[1*5*5*4] = { 
  /* [0][0][][] */ 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 
  /* [0][1][][] */ 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 
  /* [0][2][][] */ 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 
  /* [0][3][][] */ 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 
  /* [0][4][][] */ 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 1,1,1,1, 
};
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data9[1*5*5*4*4] = { 
  /* [0][0][0][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][0][1][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][0][2][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][0][3][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][0][4][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][1][0][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][1][1][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][1][2][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][1][3][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][1][4][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][2][0][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][2][1][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][2][2][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][2][3][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][2][4][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][3][0][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][3][1][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][3][2][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][3][3][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][3][4][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][4][0][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][4][1][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][4][2][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][4][3][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
  /* [0][4][4][][] */ 2.233417272567749,3.8569502830505371,-7.3781676292419434,0.59997415542602539, 3.4936611652374268,4.1935429573059082,-10.716145515441895,4.6881723403930664, 0.47676295042037964,3.0237326622009277,-8.6536598205566406,-2.6786198616027832, 1.5392615795135498,5.8257284164428711,-7.7942485809326172,2.9961786270141602, 
};
const TfArray<5, int> tensor_dimension9 = { 5, { 1,5,5,4,4 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data10[1*5*5] = { 
  /* [0][][] */ 1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338, 1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338, 1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338, 1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338, 1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338,1.5116407871246338, 
};
const TfArray<3, int> tensor_dimension10 = { 3, { 1,5,5 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data11[1*5*5] = { 
  /* [0][][] */ -7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863, -7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863, -7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863, -7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863, -7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863,-7.7186474800109863, 
};
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data12[1*5*5*4] = { 
  /* [0][0][][] */ -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, 
  /* [0][1][][] */ -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, 
  /* [0][2][][] */ -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, 
  /* [0][3][][] */ -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, 
  /* [0][4][][] */ -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, -0.5,-0.5,-0.5,-0.5, 
};
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) float tensor_data13[1*5*5*4] = { 
  /* [0][0][][] */ 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 
  /* [0][1][][] */ 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 
  /* [0][2][][] */ 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 
  /* [0][3][][] */ 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 
  /* [0][4][][] */ 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 7.3515081405639648,7.3515081405639648,7.3515081405639648,7.3515081405639648, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 1,12,12,4 } };
const TfArray<2, int> tensor_dimension16 = { 2, { 25,16 } };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,5,5,1 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, true, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,-1 } };
const TfArray<1, int> outputs0 = { 1, { 14 } };
const TfLitePoolParams opdata1 = { kTfLitePaddingValid, 2,2, 3,3, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs1 = { 1, { 14 } };
const TfArray<1, int> outputs1 = { 1, { 15 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 15,7,-1 } };
const TfArray<1, int> outputs2 = { 1, { 16 } };
const TfLiteReshapeParams opdata3 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs3 = { 2, { 16,5 } };
const TfArray<1, int> outputs3 = { 1, { 17 } };
const TfLiteSubParams opdata4 = { kTfLiteActNone };
const TfArray<2, int> inputs4 = { 2, { 17,9 } };
const TfArray<1, int> outputs4 = { 1, { 18 } };
const TfLiteMulParams opdata5 = { kTfLiteActNone };
const TfArray<2, int> inputs5 = { 2, { 18,18 } };
const TfArray<1, int> outputs5 = { 1, { 19 } };
const ALIGN(1) uint8_t opdata6[1] = { 0,  }; /* op type 74=SUM */
const TfArray<2, int> inputs6 = { 2, { 19,4 } };
const TfArray<1, int> outputs6 = { 1, { 20 } };
const TfLiteAddParams opdata7 = { kTfLiteActNone };
const TfArray<2, int> inputs7 = { 2, { 20,13 } };
const TfArray<1, int> outputs7 = { 1, { 21 } };
const TfLiteMulParams opdata8 = { kTfLiteActNone };
const TfArray<2, int> inputs8 = { 2, { 21,12 } };
const TfArray<1, int> outputs8 = { 1, { 22 } };
const TfLiteAddParams opdata9 = { kTfLiteActNone };
const TfArray<2, int> inputs9 = { 2, { 22,1 } };
const TfArray<1, int> outputs9 = { 1, { 23 } };
const ALIGN(1) uint8_t opdata10[1] = { 0,  }; /* op type 82=REDUCE_MAX */
const TfArray<2, int> inputs10 = { 2, { 23,3 } };
const TfArray<1, int> outputs10 = { 1, { 24 } };
const TfLiteReshapeParams opdata11 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs11 = { 2, { 24,2 } };
const TfArray<1, int> outputs11 = { 1, { 25 } };
const TfLiteMulParams opdata12 = { kTfLiteActNone };
const TfArray<2, int> inputs12 = { 2, { 25,8 } };
const TfArray<1, int> outputs12 = { 1, { 26 } };
const TfLiteSubParams opdata13 = { kTfLiteActNone };
const TfArray<2, int> inputs13 = { 2, { 23,26 } };
const TfArray<1, int> outputs13 = { 1, { 27 } };
const TfArray<1, int> inputs14 = { 1, { 27 } };
const TfArray<1, int> outputs14 = { 1, { 28 } };
const ALIGN(1) uint8_t opdata15[1] = { 0,  }; /* op type 74=SUM */
const TfArray<2, int> inputs15 = { 2, { 28,3 } };
const TfArray<1, int> outputs15 = { 1, { 29 } };
const TfArray<1, int> inputs16 = { 1, { 29 } };
const TfArray<1, int> outputs16 = { 1, { 30 } };
const TfLiteAddParams opdata17 = { kTfLiteActNone };
const TfArray<2, int> inputs17 = { 2, { 30,24 } };
const TfArray<1, int> outputs17 = { 1, { 31 } };
const TfLiteSubParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 31,11 } };
const TfArray<1, int> outputs18 = { 1, { 32 } };
const ALIGN(4) uint8_t opdata19[4] = { 0, 0, 0, 0,  }; /* op type 42=DIV */
const TfArray<2, int> inputs19 = { 2, { 32,10 } };
const TfArray<1, int> outputs19 = { 1, { 33 } };
const TfArray<1, int> inputs20 = { 1, { 33 } };
const TfArray<1, int> outputs20 = { 1, { 34 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 55296, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 16, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 4, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension3, 4, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 20, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1536, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 256, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1600, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteMmapRo, kTfLiteFloat32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension14, 2304, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension16, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension9, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension9, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension9, 1600, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1600), (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 800), (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 1200), (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension25, 100, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension1, 400, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 400), (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
{ kTfLiteArenaRw, kTfLiteFloat32, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 100, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[21] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, nullptr, nullptr, 0, },
};
#else
TfLiteNode tflNodes[21] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_AVERAGE_POOL_2D, OP_FULLY_CONNECTED, OP_RESHAPE, OP_SUB, OP_MUL, OP_SUM, OP_ADD, OP_MUL, OP_ADD, OP_REDUCE_MAX, OP_RESHAPE, OP_MUL, OP_SUB, OP_EXP, OP_SUM, OP_LOG, OP_ADD, OP_SUB, OP_DIV, OP_ABS, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 35, };
const size_t tflNodes_subgraph_index[] = {0, 21, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  34, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_62_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 35;
  for (size_t i = 0; i < 35; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_AVERAGE_POOL_2D] = Register_AVERAGE_POOL_2D();
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_SUB] = Register_SUB();
  registrations[OP_MUL] = Register_MUL();
  registrations[OP_SUM] = Register_SUM();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_REDUCE_MAX] = Register_REDUCE_MAX();
  registrations[OP_EXP] = Register_EXP();
  registrations[OP_LOG] = Register_LOG();
  registrations[OP_DIV] = Register_DIV();
  registrations[OP_ABS] = Register_ABS();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_62_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_62_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_62_invoke() {
  for (size_t i = 0; i < 21; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_62_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
